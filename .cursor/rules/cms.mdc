---
alwaysApply: true
---
# Itqan CMS - Cursor AI Rules & Guidelines

## Project Overview
This is the **Itqan Quranic Content Management System (CMS)** - a specialized headless CMS designed to aggregate, license, and distribute verified Quranic content (text, audio, translations, tafsir) to Islamic organizations, app developers, and publishers through controlled APIs with proper licensing workflows. 

The system enables **Islamic content authenticity** through scholarly review workflows, **global distribution** via CDN, and **flexible licensing** supporting Islamic copyright principles. Built with **Angular 19 + Django 4.2 + Wagtail** architecture, it provides role-based access control for **Admins, Publishers, Developers, and Reviewers** to manage Quranic content licensing and distribution at scale.

### Islamic Content Management Focus
- **Content Integrity**: SHA-256 checksums for Quranic text accuracy verification
- **Scholarly Review**: Wagtail workflows for Islamic scholar content approval
- **Multilingual Support**: Native Arabic with RTL layouts + translation management
- **Licensing Flexibility**: Support for Islamic copyright and usage principles
- **Global Distribution**: Optimized for worldwide Islamic community access

## Critical AI Task Processing Rule
ðŸš¨ **MANDATORY**: Every user prompt must be converted into a structured JSON task format before execution. Follow these steps:

1. **Parse the user request** and identify the core task
2. **Validate against C4 Architecture** - Check `docs/diagrams/level1-4` for architectural alignment
3. **Create a JSON prompt** following the established format in `ai-memory-bank/tasks/*.json`
4. **Execute the task** using the structured JSON as guidance
5. **Update relevant tracking** in `ai-memory-bank/tasks.csv` if applicable

### Architecture Validation Checklist
Before implementing any feature, verify:
- âœ… **Level 1**: Does this fit the Islamic content management ecosystem?
- âœ… **Level 2**: Which containers are involved (Angular, Django, PostgreSQL, etc.)?
- âœ… **Level 3**: Which Django apps are affected (Core, Accounts, Content, Licensing, Analytics, API)?
- âœ… **Level 4**: Does this follow the 7-entity schema (Role, User, Resource, License, Distribution, AccessRequest, UsageEvent)?

### JSON Prompt Template Structure:
```json
{
  "prompt": "Clear description of the autonomous task to complete",
  "context": {
    "project": "Itqan CMS",
    "feature": "Feature name",
    "auth_model": "Auth0 Hybrid (SPA + M2M)",
    "tech_stack": ["Angular 19", "Django 5.2", "PostgreSQL", "NG-ZORRO"],
    "screens": ["SCREEN-ID"],
    "colors": {"primary": "#669B80", "dark": "#22433D"}
  },
  "objectives": ["Clear numbered objectives"],
  "tasks": ["Specific actionable tasks"],
  "guard_rails": ["Safety and security constraints"],
  "acceptance_criteria": ["Testable success conditions"],
  "definition_of_done": ["Completion requirements"],
  "out_of_scope": ["What not to include"],
  "references": ["Related files and documentation"]
}
```

Never skip this JSON conversion step - it ensures consistency and traceability across all development tasks.

## Architecture & Tech Stack

### Complete System Architecture (Based on C4 Model)
Following the C4 architecture diagrams in `docs/diagrams/`, the system uses:

#### **Level 1: System Context**
- **Users**: Publishers (Islamic orgs), Developers (app builders), Admins, Reviewers, End Users
- **External Systems**: Auth0 (OAuth/OIDC), Alibaba Cloud (OSS+CDN), Email Service (Mailgun)
- **Core Purpose**: Quranic content aggregation â†’ licensing â†’ controlled distribution â†’ global access

#### **Level 2: Container Architecture** 
- **Frontend**: Angular 19 SPA with NG-ZORRO + Auth0 SPA SDK + bilingual support (EN/AR)
- **Backend**: Django 4.2 LTS + Wagtail CMS + Django REST Framework (monolithic API)
- **Data Layer**: PostgreSQL 16 (primary) + Redis (cache/queue) + MeiliSearch v1.6 (search)
- **Storage**: MinIO (dev) â†’ Alibaba OSS (prod) with CDN for global content delivery
- **Background**: Celery workers for content indexing, notifications, and file processing

#### **Level 3: Django Backend Components**
- **Domain Apps**: Core, Accounts, Content, Licensing, Analytics, API (domain-driven design)
- **Wagtail Layer**: Editorial interface, content workflows, page management, search integration
- **DRF Layer**: API views, serializers, permissions, pagination with comprehensive REST API
- **Services**: Auth (Auth0 OIDC), Content, License, Search (MeiliSearch), Notification services
- **Middleware**: CORS, JWT Auth, Role-based permissions with request pipeline processing

#### **Level 4: Database Schema (7 Core Entities)**
- **User Management**: `ROLE` (4 roles) â†’ `USER` (Auth0 integration)
- **Content**: `RESOURCE` (Quranic content) â†’ `LICENSE` (usage terms) â†’ `DISTRIBUTION` (access formats)
- **Workflow**: `ACCESS_REQUEST` (approval workflow) â†’ `USAGE_EVENT` (analytics tracking)
- **Features**: UUID PKs, JSONB metadata, soft deletes, integrity verification, multilingual support

## UI/UX Design System - NG-ZORRO (Ant Design for Angular)

### Design Principles
- **Clarity**: Clear visual hierarchy with consistent NG-ZORRO component patterns
- **Efficiency**: Streamlined workflows using NG-ZORRO's comprehensive component library
- **Controllability**: Users maintain control through predictable Angular + NG-ZORRO interactions
- **Certainty**: Reliable interface behaviors following Ant Design specifications adapted for Angular

### Brand Color Integration
- **Primary Brand**: #669B80 (Itqan Green) - mapped to Ant Design's colorPrimary token
- **Dark Accent**: #22433D (Itqan Dark Green) - used for emphasis and dark theme
- **Theme Configuration**:
  ```typescript
  // Angular NG-ZORRO theme configuration
  export const itqanTheme = {
    primaryColor: '#669B80',
    successColor: '#52c41a',
    warningColor: '#faad14', 
    errorColor: '#ff4d4f',
    borderRadius: '6px',
    fontFamily: {
      en: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
      ar: '"Noto Sans Arabic", "IBM Plex Sans Arabic", sans-serif'
    }
  };
  ```

### Component Usage Standards
- **Forms**: Always use NG-ZORRO nz-form, nz-input, nz-select, nz-date-picker components
- **Navigation**: Use nz-menu, nz-breadcrumb, nz-steps, nz-pagination components
- **Data Display**: Use nz-table, nz-list, nz-card, nz-descriptions, nz-tag components
- **Feedback**: Use nz-message, nz-notification, nz-modal, nz-drawer, nz-alert components
- **Layout**: Use nz-space, nz-divider, nz-row, nz-col with 8px grid system

### Typography & Spacing
- **Arabic Fonts**: 'Noto Sans Arabic', 'IBM Plex Sans Arabic', sans-serif
- **English Fonts**: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif
- **Base Grid**: 8px spacing system (8px, 16px, 24px, 32px, 48px, 64px)
- **Line Heights**: Follow Ant Design's 1.5715 base for optimal readability

## Code Quality & Standards

### General Principles
- Follow existing patterns in the codebase - don't reinvent the wheel
- Prioritize code reuse and modularity
- Write self-documenting code with clear variable and function names
- Use TypeScript strictly - avoid `any` types
- Follow established naming conventions in the project

### Django-Specific Rules
- **Domain-Driven Apps**: Follow the 6-app structure: Core, Accounts, Content, Licensing, Analytics, API
- **Django 4.2 LTS Patterns**: Use established Django 4.2 LTS patterns for models, views, serializers
- **Wagtail Integration**: Use Wagtail CMS for editorial workflows and scholarly content review
- **DRF Standards**: Leverage Django REST Framework for all API endpoints with consistent serialization
- **7-Entity Schema**: Adhere to the exact database schema: Role, User, Resource, License, Distribution, AccessRequest, UsageEvent
- **Islamic Content Requirements**: Implement content integrity (checksums), multilingual support (Arabic RTL), and scholarly review workflows
- **Proper Signal Usage**: Use Django signals appropriately for event-driven architecture
- **Environment Configuration**: Use environment variables for all configuration (never hardcode values)
- **Error Handling**: Implement comprehensive error handling and validation in API endpoints

### Angular Best Practices
- Use Angular 19 standalone components pattern consistently
- Implement Angular Signals for reactive state management
- Use NG-ZORRO components following design system guidelines
- Leverage Angular Universal for SSR when SEO is required
- Follow Angular i18n patterns for bilingual EN/AR support
- Use Angular Services for API communication and state management

### Database & Content Modeling
- **7-Entity Schema Compliance**: Strictly follow the core entities from `docs/diagrams/level4-data-models.md`
- **UUID Primary Keys**: Use UUIDs consistently for all primary keys across all entities
- **Soft Delete Pattern**: Implement soft deletes with `is_active` flags rather than hard deletes
- **JSONB Metadata**: Use JSONB fields for flexible metadata without schema migrations
- **Content Integrity**: Include SHA-256 checksum fields for Quranic content verification
- **Multilingual Support**: Implement proper language fields with ISO codes (ar, en, etc.)
- **Referential Integrity**: Maintain strict foreign key relationships between entities
- **Islamic Content Validation**: Add validation for Islamic content standards and authenticity
- **Timestamp Auditing**: Include created_at/updated_at timestamps on all entities
- **Index Strategy**: Create strategic indexes on foreign keys and frequently queried fields

## Internationalization (i18n)
- Support English (en) and Arabic (ar) locales
- Use Django's i18n framework with .po files for backend localization
- Use Angular i18n with XLIFF/JSON files for frontend localization
- Implement proper RTL support for Arabic content in NG-ZORRO components
- Follow established translation patterns in both Django templates and Angular components
- Test bilingual functionality thoroughly across backend and frontend

## Authentication & Security
- Use Auth0 SPA SDK on Angular frontend for user authentication
- Use Auth0 OIDC/JWKS validation on Django backend for API security
- Store secrets in environment variables only
- Implement proper RBAC with defined roles: Admin, Publisher, Developer, Reviewer
- Use HTTPS everywhere and validate all inputs
- Follow established JWT token patterns for API authentication

## Development Workflow
- Reference existing task JSON files in ai-memory-bank/tasks/ for implementation patterns
- Follow the established Docker Compose setup for local development
- Use existing environment variable patterns from env.dev.example
- Test changes with `docker compose up --build` before committing
- Follow existing file structure and naming conventions

## Task Execution Guidelines
- **ALWAYS** convert user prompts to JSON format before starting work
- Always read related task JSON files in ai-memory-bank/tasks/ before starting
- Follow the established prompt structure and acceptance criteria
- **MANDATORY STATUS TRACKING**: 
  - When starting a task: Update status from "todo" to "in-progress" in ai-memory-bank/tasks.csv
  - When completing a task: Update status from "in-progress" to "completed" in ai-memory-bank/tasks.csv
- **MANDATORY TASK COMPLETION DOCUMENTATION**:
  - When completing any task, create a summary document in `./docs/md/`
  - Use naming convention: `{task-number}-{short-description}.md`
  - Include task objectives, what was accomplished, testing results, and next steps
  - Examples: `1-user-registration.md`, `5-dashboard-welcome.md`, `12-api-key-management.md`
- Reference existing similar implementations before writing new code
- Test bilingual functionality for any user-facing features

## File Structure Conventions
```
backend/                # Django 4.2 + Wagtail backend
â”œâ”€â”€ apps/              # Domain-driven Django apps
â”‚   â”œâ”€â”€ core/          # Base models, utilities, common permissions
â”‚   â”œâ”€â”€ accounts/      # User management, Auth0 integration, roles
â”‚   â”œâ”€â”€ content/       # Quranic resources, distributions
â”‚   â”œâ”€â”€ licensing/     # License management, access requests, notifications
â”‚   â”œâ”€â”€ analytics/     # Usage tracking, events, reporting
â”‚   â”œâ”€â”€ authentication/# Auth0 OIDC integration, JWT validation
â”‚   â”œâ”€â”€ search/        # MeiliSearch integration, indexing
â”‚   â””â”€â”€ api/           # REST endpoints, API versioning, permissions
â”œâ”€â”€ config/            # Django settings (base, dev, prod)
â”œâ”€â”€ requirements/      # Python dependencies (base, dev, prod)
â””â”€â”€ Dockerfile.dev     # Development container

frontend/              # Angular 19 SPA frontend  
â”œâ”€â”€ src/app/           # Angular application structure
â”œâ”€â”€ src/components/    # Reusable NG-ZORRO components
â”œâ”€â”€ src/services/      # API communication, state management
â”œâ”€â”€ src/models/        # TypeScript interfaces for 7 core entities
â”œâ”€â”€ package.json       # Node.js dependencies
â””â”€â”€ Dockerfile.dev     # Development container

docs/                  # Architecture & Documentation
â”œâ”€â”€ diagrams/          # C4 model diagrams (Level 1-4)
â”‚   â”œâ”€â”€ level1-system-context.md      # System in Islamic content ecosystem
â”‚   â”œâ”€â”€ level2-container-diagram.md   # Angular + Django architecture
â”‚   â”œâ”€â”€ level3-component-diagram.md   # Django backend components
â”‚   â”œâ”€â”€ level4-data-models.md         # 7-entity database schema
â”‚   â””â”€â”€ api-surface-overview.mmd      # Complete API specification
â””â”€â”€ md/                # Task completion summaries (required)

ai-memory-bank/        # Task management & tracking
â”œâ”€â”€ tasks.csv          # Main task tracking (30 tasks)
â””â”€â”€ tasks/             # Detailed JSON task specifications
```

## Testing & Quality Assurance

### Systematic Testing Methodology
Every task must include comprehensive testing using multiple approaches:

#### 1. cURL Testing Protocol
- **GET Requests**: Test page accessibility and response headers
- **POST Requests**: Validate form submissions and API endpoints
- **Error Handling**: Test invalid inputs and edge cases
- **Authentication**: Test protected routes and token handling

```bash
# Example testing sequence:
curl -i http://localhost:3000/register                    # Test page access
curl -X POST http://localhost:3000/register \            # Test form submission
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "firstName=Test&email=test@example.com"
curl -i http://localhost:3000/api/auth/login             # Test Auth0 endpoints
```

#### 2. Browser Testing Requirements
- Test all features in both English and Arabic
- Verify RTL layout works correctly for Arabic content
- Ensure responsive design works on mobile/tablet/desktop
- Test JavaScript functionality and user interactions
- Validate form validation and error states

#### 3. Infrastructure Testing
- Test Docker Compose stack functionality
- Validate service connectivity (PostgreSQL, MinIO, Meilisearch)
- Test environment variable configuration
- Verify port accessibility and service health

#### 4. API Testing Protocol
- Validate API endpoints with proper authentication
- Test role-based permissions thoroughly
- Test rate limiting and security constraints
- Validate request/response formats and error codes

#### 5. Integration Testing
- Test end-to-end user flows (registration â†’ login â†’ dashboard)
- Validate Auth0 â†’ Strapi â†’ Next.js integration
- Test database operations and data consistency
- Test file upload and storage workflows

#### 6. Error Diagnosis Protocol
When issues are found:
1. **Identify**: Log the exact error message and HTTP status
2. **Isolate**: Test individual components separately
3. **Debug**: Check environment variables and configuration
4. **Fix**: Implement graceful error handling
5. **Verify**: Re-test the entire flow end-to-end

#### 7. Documentation Requirements
- Document all test procedures in task completion
- Include cURL commands for API testing
- Record environment setup requirements
- Update troubleshooting guides with solutions

## Performance Considerations
- Use Redis caching for Celery task queue and session storage
- Optimize images and assets with CDN integration (Alibaba OSS/CDN)
- Implement proper pagination for content listings in Django REST API
- Use database indexes for frequently queried fields
- Leverage Angular OnPush change detection and lazy loading
- Use MeiliSearch for fast full-text search instead of database queries

## Error Handling
- Implement graceful error handling throughout the application
- Use proper HTTP status codes
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle edge cases and validation failures

## Documentation
- Update README files when changing setup procedures
- Document any new environment variables in env.dev.example
- Keep API documentation current with changes
- Update C4 diagrams if architecture changes significantly

## References

### Architecture Documentation
- **C4 Model Diagrams**: `docs/diagrams/` - Complete architecture from system context to data models
  - `level1-system-context.md` - Itqan CMS in Islamic content ecosystem  
  - `level2-container-diagram.md` - Angular + Django + supporting services
  - `level3-component-diagram.md` - Django backend internal components
  - `level4-data-models.md` - 7-entity database schema (MUST FOLLOW)
- **API Specification**: `docs/diagrams/api-surface-overview.mmd` - Complete REST API design
- **Database Schema**: `docs/diagrams/high-level-db-components-relationship.mmd` - Core entity relationships

### Development Workflow
- **Task Management**: `ai-memory-bank/tasks.csv` - 30 tasks with status tracking
- **Task Specifications**: `ai-memory-bank/tasks/*.json` - Detailed JSON task definitions
- **Completion Documentation**: `docs/md/` - Required task completion summaries
- **Setup Guide**: `README-Docker.md` - Development environment configuration

### Islamic Content Management
- **Business Requirements**: `docs/Itqan_CMS_BRD.md` and `docs/Itqan_CMS_BRS.md`
- **Content Integrity**: SHA-256 checksum verification for Quranic text
- **Scholarly Review**: Wagtail workflow integration for content approval
- **Multilingual Support**: Arabic RTL + English LTR with proper i18n

### Implementation Guidelines
**CRITICAL**: Always reference the C4 architecture diagrams before implementing any feature. The 7-entity database schema in `level4-data-models.md` is the single source of truth for all data modeling decisions.

Remember: Consistency with existing patterns, Islamic content requirements, and architectural alignment are paramount for this specialized CMS.

## Completed Task Validation

### Tasks 1-7 Status (Architecture-Compliant âœ…)
- **Task 1**: Angular 19 Project Bootstrap - âœ… Aligned with Level 2 Container (Angular SPA + NG-ZORRO)
- **Task 2**: Django-Wagtail Project Bootstrap - âœ… Aligned with Level 2 Container (Django 4.2 LTS + Wagtail + PostgreSQL 16)
- **Task 3**: Core Data Models & Migrations - âœ… Implements exact Level 4 schema (7 entities with UUID PKs, soft delete)
- **Task 4**: Django REST API v1 - âœ… Follows Level 3 DRF layer with comprehensive CRUD endpoints
- **Task 5**: Celery + MeiliSearch Integration - âœ… Implements Level 2 background processing + search containers
- **Task 6**: Auth0 OIDC Integration - âœ… Follows Level 2 Auth0 external system + Level 3 Auth service
- **Task 7**: AccessRequest Workflow - âœ… Implements Level 4 AccessRequest entity with email notifications + access control

### Current Implementation Status
The backend foundation is **enterprise-ready** with:
- **7 Core Entities** implemented per Level 4 schema
- **6 Domain Apps** organized per Level 3 component structure  
- **Auth0 OIDC** integration per Level 2 external systems
- **Comprehensive Workflow** for Islamic content licensing and access control
- **Search + Background Tasks** via MeiliSearch + Celery per Level 2 infrastructure

### Next Development Phase
Tasks 8+ should focus on:
- **Frontend Integration** (Angular connects to Django REST API)
- **Content Management UI** (Publisher workflows for Quranic content)
- **Admin Interface** (Access request approvals, user management)
- **Production Deployment** (DigitalOcean â†’ Alibaba Cloud migration per Level 1 context)

## Developer (User) Flow Documentation

### Complete Developer Resource Access & Download Flow
This section documents the end-to-end "Developer Resource Access & Resource Download - Initial Registration Scenario" as illustrated in `docs/screens/Developer Resource Access & Resource Download - Initial Registration Scenario.png`.

#### Flow Overview
The developer onboarding and resource access process follows a secure, multi-step workflow that ensures proper authentication, authorization, and licensing compliance for Quranic content distribution.

#### Step-by-Step Process

1. **Initial Entry Point**
   - Developer discovers Itqan CMS platform
   - Navigates to registration page
   - **Implementation**: Task 12 (REG-001 screen)

2. **Developer Registration**
   - User completes registration form with required details
   - Auth0 SPA SDK handles account creation
   - Initial user record created in Django backend
   - **Implementation**: Task 12 (User Registration)
   - **Screens**: REG-001
   - **Entities**: User, Role (Developer role assignment)

3. **Email Verification**
   - Auth0 sends verification email automatically
   - Developer clicks verification link
   - Email status updated in User entity
   - **Implementation**: Task 13 (Email Verification)
   - **Screens**: REG-002
   - **Entities**: User (email_verified flag)

4. **Authentication Process**
   - Developer attempts login via Auth0
   - Support for Social Login (GitHub/Google) and email/password
   - **Implementation**: Task 14 (User Login)
   - **Screens**: AUTH-001
   - **External Systems**: Auth0 OIDC

5. **Token Exchange & Loading**
   - Auth0 access token exchanged for Django JWT
   - Loading state during token processing
   - **Implementation**: Task 15 (Token Exchange Loading)
   - **Screens**: AUTH-002
   - **API Endpoints**: `/api/auth/exchange/`

6. **Dashboard Welcome & Onboarding**
   - First-time user greeted with welcome interface
   - Profile completion checklist presented
   - API quota and access status displayed
   - **Implementation**: Task 16 (Dashboard Welcome)
   - **Screens**: DASH-001
   - **Entities**: User profile, AccessRequest status

7. **Resource Discovery & Access Request**
   - Developer browses available Quranic content resources
   - Selects desired content for licensing
   - Submits AccessRequest for admin approval
   - **Entities**: Resource, License, AccessRequest
   - **Workflow**: Draft â†’ Pending â†’ Review â†’ Approved/Rejected

8. **Admin Approval Process**
   - Admin receives notification of pending AccessRequest
   - Reviews developer profile and request details
   - Makes approval/rejection decision with comments
   - **Entities**: AccessRequest (status updates), User (admin role)
   - **Notifications**: Email notifications to developer

9. **Resource Access Granted**
   - Upon approval, Distribution records are created
   - API keys and access tokens generated
   - Developer gains programmatic access to licensed content
   - **Entities**: Distribution, UsageEvent (tracking begins)

10. **Content Download & Integration**
    - Developer can now access licensed Quranic content via API
    - Usage tracking begins for analytics and compliance
    - **Entities**: UsageEvent, Distribution
    - **External Systems**: MinIO/Alibaba OSS for content delivery

#### Technical Implementation Mapping

**Frontend Components (Angular 19 + NG-ZORRO)**:
- Registration: `features/auth/register.component.ts` (REG-001)
- Email Verification: `features/auth/email-verification.component.ts` (REG-002)
- Login: `features/auth/login.component.ts` (AUTH-001)
- Token Exchange: `features/auth/auth-callback.component.ts` (AUTH-002)
- Dashboard: `features/dashboard/dashboard.component.ts` (DASH-001)

**Backend APIs (Django 4.2 + DRF)**:
- Authentication: `apps/authentication/` (Auth0 OIDC integration)
- User Management: `apps/accounts/` (User and Role entities)
- Content Management: `apps/content/` (Resource and Distribution entities)
- Licensing: `apps/licensing/` (License and AccessRequest entities)
- Analytics: `apps/analytics/` (UsageEvent tracking)

**Database Entities (7-Entity Schema)**:
- **User**: Developer account and profile data
- **Role**: Developer role assignment and permissions
- **Resource**: Quranic content available for licensing
- **License**: Usage terms and conditions for content
- **Distribution**: Granted access to specific content
- **AccessRequest**: Approval workflow for content access
- **UsageEvent**: Analytics and compliance tracking

#### Bilingual Support (EN/AR)
- All user-facing screens support English and Arabic
- Right-to-Left (RTL) layout for Arabic content
- Islamic cultural considerations in UI/UX design
- Proper Arabic typography with 'Noto Sans Arabic' font family

#### Security & Compliance
- Auth0 OIDC for secure authentication
- JWT tokens for API access control
- Role-based access control (RBAC) throughout the flow
- SHA-256 checksums for Quranic content integrity
- Audit trail via UsageEvent logging

#### Integration Points
- **Auth0**: OAuth/OIDC authentication and user management
- **Mailgun**: Email notifications for workflow steps
- **MinIO/Alibaba OSS**: Content storage and CDN delivery
- **MeiliSearch**: Full-text search for resource discovery
- **Redis**: Session management and Celery task queue
- **PostgreSQL**: Primary data storage with JSONB metadata

This flow ensures that all developer interactions with Quranic content are properly authenticated, authorized, and tracked while maintaining the highest standards of Islamic content integrity and scholarly review.

### User Access Request Scenario Workflow
This section documents the detailed "User Access Request Scenario" that occurs within step 7 of the main developer flow, providing granular documentation of the resource access request process.

#### Access Request Flow Overview
Once a developer has completed registration and reached the dashboard, they can initiate specific resource access requests. This workflow ensures proper licensing compliance and Islamic content authenticity verification before granting access to Quranic content.

#### Detailed Access Request Steps

1. **Logged-in User Request Access Scenario Starts**
   - Developer navigates to resource catalog from dashboard
   - Identifies specific Quranic content resource for licensing
   - Clicks "Request Access" button to initiate workflow
   - **Implementation**: Accessible from DASH-001 dashboard via resource discovery section
   - **Security**: Requires valid Django JWT and Developer role verification

2. **User Answers Access Purpose Questions**
   - Developer completes brief questionnaire about intended use
   - Questions cover: project type, expected usage volume, distribution method, target audience
   - Form validation ensures completeness and appropriate use cases
   - **Implementation**: Angular reactive form with NG-ZORRO nz-form components
   - **Screens**: ACCESS-REQ-001 (Questionnaire form)
   - **Validation**: Islamic content usage guidelines compliance

3. **User Reviews Terms and Conditions in Carousel**
   - Interactive carousel displays licensing terms, Islamic copyright principles, usage restrictions
   - Multi-slide presentation covering: attribution requirements, modification policies, distribution limits, scholarly integrity standards
   - Bilingual presentation (EN/AR) with proper RTL layout for Arabic content
   - **Implementation**: NG-ZORRO nz-carousel with nz-card components
   - **Content**: Dynamic loading of license terms from License entity
   - **Navigation**: Previous/Next controls, progress indicators, slide thumbnails

4. **User Accept or Discard Decision Process**
   - Clear accept/decline options presented after terms review
   - Accept button enables after full carousel completion (all slides viewed)
   - Decline option allows graceful exit with optional feedback
   - **Implementation**: NG-ZORRO nz-button with nz-modal confirmation dialogs
   - **UX**: Disabled state management, clear visual feedback, confirmation prompts
   - **Tracking**: User decision logged in UsageEvent for analytics

5. **Decision Point: User Accept?**
   - **If Accept**: Proceed to access request submission and processing
   - **If Decline**: Return to dashboard with optional feedback collection
   - **Implementation**: Angular reactive state management with clear workflow branching
   - **Backend**: AccessRequest entity status updates (Draft â†’ Pending)

6. **Access Approved Path (Accept = Yes)**
   - **Popup Collapse and Fade**: Smooth UI transition with loading indicators
   - **File Start to Download**: Resource access granted, download initiated
   - **Implementation**: NG-ZORRO nz-progress with download status tracking
   - **Backend**: Distribution entity creation, file access token generation
   - **Security**: Time-limited download URLs, audit trail creation

#### Technical Implementation Details

**Frontend Components (Angular 19 + NG-ZORRO)**:
- Access Request Form: `features/access/access-request-form.component.ts`
- Terms Carousel: `features/access/terms-carousel.component.ts`
- Decision Modal: `features/access/access-decision-modal.component.ts`
- Download Progress: `features/access/download-progress.component.ts`

**Backend APIs (Django 4.2 + DRF)**:
- Access Request Submission: `POST /api/v1/licensing/access-requests/`
- Terms and Conditions: `GET /api/v1/licensing/licenses/{id}/terms/`
- Download Authorization: `POST /api/v1/content/distributions/{id}/download/`
- Usage Tracking: `POST /api/v1/analytics/usage-events/`

**Database Entities Integration**:
- **AccessRequest**: Stores request details, purpose, status progression
- **License**: Contains terms, conditions, Islamic copyright requirements
- **Distribution**: Created upon approval for download access management
- **UsageEvent**: Tracks user decisions, download activities, compliance metrics
- **Resource**: Referenced resource with SHA-256 integrity checksums
- **User**: Developer profile with access history and quota tracking

#### Islamic Content Compliance Features
- **Scholarly Review Integration**: Terms include scholarly authenticity verification requirements
- **Attribution Standards**: Clear requirements for Quranic content attribution in derivative works
- **Modification Policies**: Strict guidelines preserving Quranic text integrity (no alterations permitted)
- **Distribution Controls**: Usage tracking ensures proper Islamic copyright principle adherence
- **Integrity Verification**: SHA-256 checksums provided for content authenticity validation

#### Bilingual User Experience (EN/AR)
- **Terms Carousel**: Full bilingual presentation of licensing terms
- **Form Labels**: Complete Arabic translation with proper RTL form layout
- **Decision Prompts**: Clear messaging in both languages for accept/decline options
- **Progress Indicators**: Culturally appropriate icons and messaging
- **Error Messages**: Comprehensive bilingual error handling and user guidance

#### Security and Audit Features
- **Request Validation**: Server-side validation of all access request parameters
- **Rate Limiting**: Prevention of automated access request abuse
- **Audit Trail**: Complete logging of user decisions and download activities
- **Token Security**: Time-limited, single-use download authorization tokens
- **Compliance Tracking**: Monitoring adherence to Islamic content usage guidelines

#### Integration with Main Developer Flow
This detailed access request workflow represents the granular implementation of steps 7-10 in the main developer flow:
- **Step 7 Expansion**: Resource Discovery & Access Request â†’ Detailed questionnaire and terms review
- **Step 8 Connection**: Admin Approval Process â†’ Triggered by access request submission
- **Step 9 Implementation**: Resource Access Granted â†’ Download authorization and Distribution creation
- **Step 10 Tracking**: Content Download & Integration â†’ Usage analytics and compliance monitoring

This comprehensive workflow ensures that all Quranic content access requests follow proper Islamic licensing principles while providing a smooth, user-friendly experience for developers seeking to integrate authentic Islamic content into their applications.

## Complete Screen Flow Documentation

### Comprehensive User Journey Overview
The Itqan CMS provides multiple user journey paths designed to serve different audiences while maintaining Islamic content integrity and proper authentication workflows. The complete screen flow accommodates both authenticated and unauthenticated users with seamless transitions between different system areas.

#### Landing Page - Dual Audience Entry Point (LANDING-001)
**Starting Point**: The far-right screen serves as the primary landing page, designed to accommodate both authenticated and unauthenticated visitors.

**Key Features**:
- **Unauthenticated Visitors**: Clear call-to-action for registration, content preview, Islamic CMS value proposition
- **Authenticated Users**: Quick access to dashboard, recent activity, personalized content recommendations
- **Bilingual Support**: Full EN/AR language switching with proper RTL layout for Arabic
- **Islamic Branding**: Prominent display of Itqan identity with Islamic design principles
- **Content Teaser**: Preview of available Quranic content to encourage registration

#### Primary User Flow Paths

**Path 1: Unauthenticated Visitor Journey**
1. **LANDING-001** â†’ **Registration Flow**
   - Landing page with clear value proposition for Islamic content management
   - "Get Started" or "Sign Up" call-to-action buttons
   - Content preview showcasing Quranic resources and scholarly review process

2. **REG-001** â†’ **REG-002** â†’ **AUTH-001** 
   - Standard registration flow as documented in previous developer workflow
   - Email verification process with Islamic-themed confirmation messaging
   - Login screen with social authentication (GitHub/Google) and email/password

3. **AUTH-002** â†’ **DASH-001**
   - Token exchange loading screen with Itqan branding
   - First-time user dashboard with onboarding checklist and Islamic welcome messaging

**Path 2: Authenticated User Return Journey**
1. **LANDING-001** â†’ **Quick Dashboard Access**
   - Authenticated users see personalized landing page content
   - Direct access to dashboard without additional authentication steps
   - Recent activity summary and pending notifications

2. **DASH-001** â†’ **Content Management Flows**
   - Dashboard serves as central hub for all authenticated activities
   - Access to resource discovery, content creation, and admin functions

**Path 3: Content Discovery & Access Flow**
1. **DASH-001** â†’ **Resource Catalog**
   - Browse available Quranic content with advanced filtering
   - Search functionality powered by MeiliSearch with Arabic text support
   - Resource detail pages with Islamic content metadata

2. **Resource Detail** â†’ **ACCESS-REQ-001** â†’ **Terms Carousel**
   - Resource access request initiation
   - Purpose questionnaire for Islamic content usage compliance
   - Terms and conditions carousel as documented in User Access Request workflow

3. **Decision Flow** â†’ **Download** or **Dashboard Return**
   - Accept/decline decision process
   - Successful access leads to secure download with progress tracking
   - Decline returns to dashboard with optional feedback collection

#### Administrative User Flows

**Path 4: Admin Content Management**
1. **DASH-001** â†’ **Admin Interface**
   - Role-based access to Django/Wagtail admin interface
   - Content moderation and scholarly review workflows
   - User management and access request approvals

2. **Admin Screens** â†’ **Content Publishing**
   - **ADMIN-001**: Media library and upload functionality
   - **ADMIN-002**: Search configuration and indexing management
   - **ADMIN-003**: Content creation forms with bilingual support
   - **ADMIN-004**: Workflow management for editorial processes

#### Bilingual Navigation Flows

**Arabic Language Path (AR)**
- Complete RTL layout transformation for all screens
- Arabic content management with proper typography
- Islamic calendar integration and cultural considerations
- Right-to-left navigation patterns following Arabic reading conventions

**English Language Path (EN)**
- Standard LTR layout for international users
- Western design patterns with Islamic content focus
- Accessibility compliance for global developer audience
- Standard left-to-right navigation and interaction patterns

#### Technical Screen Flow Integration

**Frontend Routing Structure (Angular 19)**:
```typescript
const routes: Routes = [
  { path: '', component: LandingPageComponent },                    // LANDING-001
  { path: 'register', component: RegisterComponent },               // REG-001
  { path: 'verify-email', component: EmailVerificationComponent },  // REG-002
  { path: 'login', component: LoginComponent },                     // AUTH-001
  { path: 'auth/callback', component: AuthCallbackComponent },      // AUTH-002
  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] }, // DASH-001
  { path: 'access-request/:resourceId', component: AccessRequestComponent }, // ACCESS-REQ-001
  { path: 'admin', loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule) }
];
```

**Backend API Integration**:
- **Landing Page APIs**: Content preview, statistics, featured resources
- **Authentication APIs**: As documented in previous workflows
- **Content APIs**: Resource discovery, access requests, downloads
- **Admin APIs**: Content management, user administration, analytics

#### Islamic Content Compliance Throughout Flow
- **Content Integrity**: SHA-256 checksums displayed at every content interaction point
- **Scholarly Attribution**: Clear attribution requirements shown throughout access flows
- **Usage Guidelines**: Islamic content usage principles integrated into every request flow
- **Audit Trails**: Complete user journey tracking for compliance and analytics

#### Security and Access Control
- **Role-Based Navigation**: Different screen access based on User roles (Admin, Publisher, Developer, Reviewer)
- **JWT Validation**: Secure token validation at every authenticated screen transition
- **Rate Limiting**: Protection against automated access attempts throughout flows
- **Content Protection**: Secure download URLs with time-limited access tokens

#### Mobile-Responsive Considerations
- **Responsive Design**: All screens adapt to mobile, tablet, and desktop viewports
- **Touch Interactions**: Mobile-optimized navigation for Arabic and English interfaces
- **Performance**: Optimized loading for slower connections in global Islamic communities
- **Offline Capability**: Progressive Web App features for content access in low-connectivity areas

This comprehensive screen flow ensures that all users, regardless of authentication status or language preference, can effectively discover, access, and utilize Quranic content while maintaining the highest standards of Islamic content integrity and scholarly review.