---
alwaysApply: true
---
# Itqan CMS - Cursor AI Rules & Guidelines

## Project Overview
This is the **Itqan Quranic Content Management System (CMS)** - a specialized headless CMS designed to aggregate, license, and distribute verified Quranic content (text, audio, translations, tafsir) to Islamic organizations, app developers, and publishers through controlled APIs with proper licensing workflows. 

The system enables **Islamic content authenticity** through scholarly review workflows, **global distribution** via CDN, and **flexible licensing** supporting Islamic copyright principles. Built with **Angular 19 + Django 4.2 + Wagtail** architecture, it provides role-based access control for **Admins, Publishers, Developers, and Reviewers** to manage Quranic content licensing and distribution at scale.

### Islamic Content Management Focus
- **Content Integrity**: SHA-256 checksums for Quranic text accuracy verification
- **Scholarly Review**: Wagtail workflows for Islamic scholar content approval
- **Multilingual Support**: Native Arabic with RTL layouts + translation management
- **Licensing Flexibility**: Support for Islamic copyright and usage principles
- **Global Distribution**: Optimized for worldwide Islamic community access

## Critical AI Task Processing Rule
ðŸš¨ **MANDATORY**: Every user prompt must be converted into a structured JSON task format before execution. Follow these steps:

1. **Parse the user request** and identify the core task
2. **Validate against C4 Architecture** - Check `docs/diagrams/level1-4` for architectural alignment
3. **Create a JSON prompt** following the established format in `ai-memory-bank/tasks/*.json`
4. **Execute the task** using the structured JSON as guidance
5. **Update relevant tracking** in `ai-memory-bank/tasks.csv` if applicable

### Architecture Validation Checklist
Before implementing any feature, verify:
- âœ… **Level 1**: Does this fit the Islamic content management ecosystem?
- âœ… **Level 2**: Which containers are involved (Angular, Django, PostgreSQL, etc.)?
- âœ… **Level 3**: Which Django apps are affected (Core, Accounts, Content, Licensing, Analytics, API)?
- âœ… **Level 4**: Does this follow the 7-entity schema (Role, User, Resource, License, Distribution, AccessRequest, UsageEvent)?

### JSON Prompt Template Structure:
```json
{
  "prompt": "Clear description of the autonomous task to complete",
  "context": {
    "project": "Itqan CMS",
    "feature": "Feature name",
    "auth_model": "Auth0 Hybrid (SPA + M2M)",
    "tech_stack": ["Angular 19", "Django 5.2", "PostgreSQL", "NG-ZORRO"],
    "screens": ["SCREEN-ID"],
    "colors": {"primary": "#669B80", "dark": "#22433D"}
  },
  "objectives": ["Clear numbered objectives"],
  "tasks": ["Specific actionable tasks"],
  "guard_rails": ["Safety and security constraints"],
  "acceptance_criteria": ["Testable success conditions"],
  "definition_of_done": ["Completion requirements"],
  "out_of_scope": ["What not to include"],
  "references": ["Related files and documentation"]
}
```

Never skip this JSON conversion step - it ensures consistency and traceability across all development tasks.

## Architecture & Tech Stack

### Complete System Architecture (Based on C4 Model)
Following the C4 architecture diagrams in `docs/diagrams/`, the system uses:

#### **Level 1: System Context**
- **Users**: Publishers (Islamic orgs), Developers (app builders), Admins, Reviewers, End Users
- **External Systems**: Auth0 (OAuth/OIDC), Alibaba Cloud (OSS+CDN), Email Service (Mailgun)
- **Core Purpose**: Quranic content aggregation â†’ licensing â†’ controlled distribution â†’ global access

#### **Level 2: Container Architecture** 
- **Frontend**: Angular 19 SPA with NG-ZORRO + Auth0 SPA SDK + bilingual support (EN/AR)
- **Backend**: Django 4.2 LTS + Wagtail CMS + Django REST Framework (monolithic API)
- **Data Layer**: PostgreSQL 16 (primary) + Redis (cache/queue) + MeiliSearch v1.6 (search)
- **Storage**: MinIO (dev) â†’ Alibaba OSS (prod) with CDN for global content delivery
- **Background**: Celery workers for content indexing, notifications, and file processing

#### **Level 3: Django Backend Components**
- **Domain Apps**: Core, Accounts, Content, Licensing, Analytics, API (domain-driven design)
- **Wagtail Layer**: Editorial interface, content workflows, page management, search integration
- **DRF Layer**: API views, serializers, permissions, pagination with comprehensive REST API
- **Services**: Auth (Auth0 OIDC), Content, License, Search (MeiliSearch), Notification services
- **Middleware**: CORS, JWT Auth, Role-based permissions with request pipeline processing

#### **Level 4: Database Schema (7 Core Entities)**
- **User Management**: `ROLE` (4 roles) â†’ `USER` (Auth0 integration)
- **Content**: `RESOURCE` (Quranic content) â†’ `LICENSE` (usage terms) â†’ `DISTRIBUTION` (access formats)
- **Workflow**: `ACCESS_REQUEST` (approval workflow) â†’ `USAGE_EVENT` (analytics tracking)
- **Features**: UUID PKs, JSONB metadata, soft deletes, integrity verification, multilingual support

## UI/UX Design System - NG-ZORRO (Ant Design for Angular)

### Design Principles
- **Clarity**: Clear visual hierarchy with consistent NG-ZORRO component patterns
- **Efficiency**: Streamlined workflows using NG-ZORRO's comprehensive component library
- **Controllability**: Users maintain control through predictable Angular + NG-ZORRO interactions
- **Certainty**: Reliable interface behaviors following Ant Design specifications adapted for Angular

### Brand Color Integration
- **Primary Brand**: #669B80 (Itqan Green) - mapped to Ant Design's colorPrimary token
- **Dark Accent**: #22433D (Itqan Dark Green) - used for emphasis and dark theme
- **Theme Configuration**:
  ```typescript
  // Angular NG-ZORRO theme configuration
  export const itqanTheme = {
    primaryColor: '#669B80',
    successColor: '#52c41a',
    warningColor: '#faad14', 
    errorColor: '#ff4d4f',
    borderRadius: '6px',
    fontFamily: {
      en: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
      ar: '"Noto Sans Arabic", "IBM Plex Sans Arabic", sans-serif'
    }
  };
  ```

### Component Usage Standards
- **Forms**: Always use NG-ZORRO nz-form, nz-input, nz-select, nz-date-picker components
- **Navigation**: Use nz-menu, nz-breadcrumb, nz-steps, nz-pagination components
- **Data Display**: Use nz-table, nz-list, nz-card, nz-descriptions, nz-tag components
- **Feedback**: Use nz-message, nz-notification, nz-modal, nz-drawer, nz-alert components
- **Layout**: Use nz-space, nz-divider, nz-row, nz-col with 8px grid system

### Typography & Spacing
- **Arabic Fonts**: 'Noto Sans Arabic', 'IBM Plex Sans Arabic', sans-serif
- **English Fonts**: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif
- **Base Grid**: 8px spacing system (8px, 16px, 24px, 32px, 48px, 64px)
- **Line Heights**: Follow Ant Design's 1.5715 base for optimal readability

## Code Quality & Standards

### General Principles
- Follow existing patterns in the codebase - don't reinvent the wheel
- Prioritize code reuse and modularity
- Write self-documenting code with clear variable and function names
- Use TypeScript strictly - avoid `any` types
- Follow established naming conventions in the project

### Django-Specific Rules
- **Domain-Driven Apps**: Follow the 6-app structure: Core, Accounts, Content, Licensing, Analytics, API
- **Django 4.2 LTS Patterns**: Use established Django 4.2 LTS patterns for models, views, serializers
- **Wagtail Integration**: Use Wagtail CMS for editorial workflows and scholarly content review
- **DRF Standards**: Leverage Django REST Framework for all API endpoints with consistent serialization
- **7-Entity Schema**: Adhere to the exact database schema: Role, User, Resource, License, Distribution, AccessRequest, UsageEvent
- **Islamic Content Requirements**: Implement content integrity (checksums), multilingual support (Arabic RTL), and scholarly review workflows
- **Proper Signal Usage**: Use Django signals appropriately for event-driven architecture
- **Environment Configuration**: Use environment variables for all configuration (never hardcode values)
- **Error Handling**: Implement comprehensive error handling and validation in API endpoints

### Angular Best Practices
- Use Angular 19 standalone components pattern consistently
- Implement Angular Signals for reactive state management
- Use NG-ZORRO components following design system guidelines
- Leverage Angular Universal for SSR when SEO is required
- Follow Angular i18n patterns for bilingual EN/AR support
- Use Angular Services for API communication and state management

### Database & Content Modeling
- **7-Entity Schema Compliance**: Strictly follow the core entities from `docs/diagrams/level4-data-models.md`
- **UUID Primary Keys**: Use UUIDs consistently for all primary keys across all entities
- **Soft Delete Pattern**: Implement soft deletes with `is_active` flags rather than hard deletes
- **JSONB Metadata**: Use JSONB fields for flexible metadata without schema migrations
- **Content Integrity**: Include SHA-256 checksum fields for Quranic content verification
- **Multilingual Support**: Implement proper language fields with ISO codes (ar, en, etc.)
- **Referential Integrity**: Maintain strict foreign key relationships between entities
- **Islamic Content Validation**: Add validation for Islamic content standards and authenticity
- **Timestamp Auditing**: Include created_at/updated_at timestamps on all entities
- **Index Strategy**: Create strategic indexes on foreign keys and frequently queried fields

## Internationalization (i18n)
- Support English (en) and Arabic (ar) locales
- Use Django's i18n framework with .po files for backend localization
- Use Angular i18n with XLIFF/JSON files for frontend localization
- Implement proper RTL support for Arabic content in NG-ZORRO components
- Follow established translation patterns in both Django templates and Angular components
- Test bilingual functionality thoroughly across backend and frontend

## Authentication & Security
- Use Auth0 SPA SDK on Angular frontend for user authentication
- Use Auth0 OIDC/JWKS validation on Django backend for API security
- Store secrets in environment variables only
- Implement proper RBAC with defined roles: Admin, Publisher, Developer, Reviewer
- Use HTTPS everywhere and validate all inputs
- Follow established JWT token patterns for API authentication

## Development Workflow
- Reference existing task JSON files in ai-memory-bank/tasks/ for implementation patterns
- Follow the established Docker Compose setup for local development
- Use existing environment variable patterns from env.dev.example
- Test changes with `docker compose up --build` before committing
- Follow existing file structure and naming conventions

## Task Execution Guidelines
- **ALWAYS** convert user prompts to JSON format before starting work
- Always read related task JSON files in ai-memory-bank/tasks/ before starting
- Follow the established prompt structure and acceptance criteria
- **MANDATORY STATUS TRACKING**: 
  - When starting a task: Update status from "todo" to "in-progress" in ai-memory-bank/tasks.csv
  - When completing a task: Update status from "in-progress" to "completed" in ai-memory-bank/tasks.csv
- **MANDATORY TASK COMPLETION DOCUMENTATION**:
  - When completing any task, create a summary document in `./docs/md/`
  - Use naming convention: `{task-number}-{short-description}.md`
  - Include task objectives, what was accomplished, testing results, and next steps
  - Examples: `1-user-registration.md`, `5-dashboard-welcome.md`, `12-api-key-management.md`
- Reference existing similar implementations before writing new code
- Test bilingual functionality for any user-facing features

## File Structure Conventions
```
backend/                # Django 4.2 + Wagtail backend
â”œâ”€â”€ apps/              # Domain-driven Django apps
â”‚   â”œâ”€â”€ core/          # Base models, utilities, common permissions
â”‚   â”œâ”€â”€ accounts/      # User management, Auth0 integration, roles
â”‚   â”œâ”€â”€ content/       # Quranic resources, distributions
â”‚   â”œâ”€â”€ licensing/     # License management, access requests, notifications
â”‚   â”œâ”€â”€ analytics/     # Usage tracking, events, reporting
â”‚   â”œâ”€â”€ authentication/# Auth0 OIDC integration, JWT validation
â”‚   â”œâ”€â”€ search/        # MeiliSearch integration, indexing
â”‚   â””â”€â”€ api/           # REST endpoints, API versioning, permissions
â”œâ”€â”€ config/            # Django settings (base, dev, prod)
â”œâ”€â”€ requirements/      # Python dependencies (base, dev, prod)
â””â”€â”€ Dockerfile.dev     # Development container

frontend/              # Angular 19 SPA frontend  
â”œâ”€â”€ src/app/           # Angular application structure
â”œâ”€â”€ src/components/    # Reusable NG-ZORRO components
â”œâ”€â”€ src/services/      # API communication, state management
â”œâ”€â”€ src/models/        # TypeScript interfaces for 7 core entities
â”œâ”€â”€ package.json       # Node.js dependencies
â””â”€â”€ Dockerfile.dev     # Development container

docs/                  # Architecture & Documentation
â”œâ”€â”€ diagrams/          # C4 model diagrams (Level 1-4)
â”‚   â”œâ”€â”€ level1-system-context.md      # System in Islamic content ecosystem
â”‚   â”œâ”€â”€ level2-container-diagram.md   # Angular + Django architecture
â”‚   â”œâ”€â”€ level3-component-diagram.md   # Django backend components
â”‚   â”œâ”€â”€ level4-data-models.md         # 7-entity database schema
â”‚   â””â”€â”€ api-surface-overview.mmd      # Complete API specification
â””â”€â”€ md/                # Task completion summaries (required)

ai-memory-bank/        # Task management & tracking
â”œâ”€â”€ tasks.csv          # Main task tracking (30 tasks)
â””â”€â”€ tasks/             # Detailed JSON task specifications
```

## Testing & Quality Assurance

### Systematic Testing Methodology
Every task must include comprehensive testing using multiple approaches:

#### 1. cURL Testing Protocol
- **GET Requests**: Test page accessibility and response headers
- **POST Requests**: Validate form submissions and API endpoints
- **Error Handling**: Test invalid inputs and edge cases
- **Authentication**: Test protected routes and token handling

```bash
# Example testing sequence:
curl -i http://localhost:3000/register                    # Test page access
curl -X POST http://localhost:3000/register \            # Test form submission
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "firstName=Test&email=test@example.com"
curl -i http://localhost:3000/api/auth/login             # Test Auth0 endpoints
```

#### 2. Browser Testing Requirements
- Test all features in both English and Arabic
- Verify RTL layout works correctly for Arabic content
- Ensure responsive design works on mobile/tablet/desktop
- Test JavaScript functionality and user interactions
- Validate form validation and error states

#### 3. Infrastructure Testing
- Test Docker Compose stack functionality
- Validate service connectivity (PostgreSQL, MinIO, Meilisearch)
- Test environment variable configuration
- Verify port accessibility and service health

#### 4. API Testing Protocol
- Validate API endpoints with proper authentication
- Test role-based permissions thoroughly
- Test rate limiting and security constraints
- Validate request/response formats and error codes

#### 5. Integration Testing
- Test end-to-end user flows (registration â†’ login â†’ dashboard)
- Validate Auth0 â†’ Strapi â†’ Next.js integration
- Test database operations and data consistency
- Test file upload and storage workflows

#### 6. Error Diagnosis Protocol
When issues are found:
1. **Identify**: Log the exact error message and HTTP status
2. **Isolate**: Test individual components separately
3. **Debug**: Check environment variables and configuration
4. **Fix**: Implement graceful error handling
5. **Verify**: Re-test the entire flow end-to-end

#### 7. Documentation Requirements
- Document all test procedures in task completion
- Include cURL commands for API testing
- Record environment setup requirements
- Update troubleshooting guides with solutions

## Performance Considerations
- Use Redis caching for Celery task queue and session storage
- Optimize images and assets with CDN integration (Alibaba OSS/CDN)
- Implement proper pagination for content listings in Django REST API
- Use database indexes for frequently queried fields
- Leverage Angular OnPush change detection and lazy loading
- Use MeiliSearch for fast full-text search instead of database queries

## Error Handling
- Implement graceful error handling throughout the application
- Use proper HTTP status codes
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle edge cases and validation failures

## Documentation
- Update README files when changing setup procedures
- Document any new environment variables in env.dev.example
- Keep API documentation current with changes
- Update C4 diagrams if architecture changes significantly

## References

### Architecture Documentation
- **C4 Model Diagrams**: `docs/diagrams/` - Complete architecture from system context to data models
  - `level1-system-context.md` - Itqan CMS in Islamic content ecosystem  
  - `level2-container-diagram.md` - Angular + Django + supporting services
  - `level3-component-diagram.md` - Django backend internal components
  - `level4-data-models.md` - 7-entity database schema (MUST FOLLOW)
- **API Specification**: `docs/diagrams/api-surface-overview.mmd` - Complete REST API design
- **Database Schema**: `docs/diagrams/high-level-db-components-relationship.mmd` - Core entity relationships

### Development Workflow
- **Task Management**: `ai-memory-bank/tasks.csv` - 30 tasks with status tracking
- **Task Specifications**: `ai-memory-bank/tasks/*.json` - Detailed JSON task definitions
- **Completion Documentation**: `docs/md/` - Required task completion summaries
- **Setup Guide**: `README-Docker.md` - Development environment configuration

### Islamic Content Management
- **Business Requirements**: `docs/Itqan_CMS_BRD.md` and `docs/Itqan_CMS_BRS.md`
- **Content Integrity**: SHA-256 checksum verification for Quranic text
- **Scholarly Review**: Wagtail workflow integration for content approval
- **Multilingual Support**: Arabic RTL + English LTR with proper i18n

### Implementation Guidelines
**CRITICAL**: Always reference the C4 architecture diagrams before implementing any feature. The 7-entity database schema in `level4-data-models.md` is the single source of truth for all data modeling decisions.

Remember: Consistency with existing patterns, Islamic content requirements, and architectural alignment are paramount for this specialized CMS.

## Completed Task Validation

### Tasks 1-7 Status (Architecture-Compliant âœ…)
- **Task 1**: Angular 19 Project Bootstrap - âœ… Aligned with Level 2 Container (Angular SPA + NG-ZORRO)
- **Task 2**: Django-Wagtail Project Bootstrap - âœ… Aligned with Level 2 Container (Django 4.2 LTS + Wagtail + PostgreSQL 16)
- **Task 3**: Core Data Models & Migrations - âœ… Implements exact Level 4 schema (7 entities with UUID PKs, soft delete)
- **Task 4**: Django REST API v1 - âœ… Follows Level 3 DRF layer with comprehensive CRUD endpoints
- **Task 5**: Celery + MeiliSearch Integration - âœ… Implements Level 2 background processing + search containers
- **Task 6**: Auth0 OIDC Integration - âœ… Follows Level 2 Auth0 external system + Level 3 Auth service
- **Task 7**: AccessRequest Workflow - âœ… Implements Level 4 AccessRequest entity with email notifications + access control

### Current Implementation Status
The backend foundation is **enterprise-ready** with:
- **7 Core Entities** implemented per Level 4 schema
- **6 Domain Apps** organized per Level 3 component structure  
- **Auth0 OIDC** integration per Level 2 external systems
- **Comprehensive Workflow** for Islamic content licensing and access control
- **Search + Background Tasks** via MeiliSearch + Celery per Level 2 infrastructure

### Next Development Phase
Tasks 8+ should focus on:
- **Frontend Integration** (Angular connects to Django REST API)
- **Content Management UI** (Publisher workflows for Quranic content)
- **Admin Interface** (Access request approvals, user management)
- **Production Deployment** (DigitalOcean â†’ Alibaba Cloud migration per Level 1 context)