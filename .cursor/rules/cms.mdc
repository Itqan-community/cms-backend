---
alwaysApply: true
---
# Itqan CMS - Cursor AI Rules & Guidelines

## Project Overview
This is the Itqan Quranic Content Management System (CMS) - a headless CMS designed to aggregate, license, and distribute verified Quranic content (text, audio, translations, tafsir) to developers and publishers through controlled APIs with proper licensing workflows. The system uses an Angular 19 + Django/Wagtail architecture with PostgreSQL, MeiliSearch, Auth0, and Celery, initially deploying on DigitalOcean DOKS before migrating to Alibaba Cloud ACK, enabling role-based access control for Admins, Publishers, Developers, and Reviewers to manage content licensing and distribution at scale.

## Critical AI Task Processing Rule
ðŸš¨ **MANDATORY**: Every user prompt must be converted into a structured JSON task format before execution. Follow these steps:

1. **Parse the user request** and identify the core task
2. **Create a JSON prompt** following the established format in `ai-memory-bank/tasks/*.json`
3. **Execute the task** using the structured JSON as guidance
4. **Update relevant tracking** in `ai-memory-bank/tasks.csv` if applicable

### JSON Prompt Template Structure:
```json
{
  "prompt": "Clear description of the autonomous task to complete",
  "context": {
    "project": "Itqan CMS",
    "feature": "Feature name",
    "auth_model": "Auth0 Hybrid (SPA + M2M)",
    "tech_stack": ["Angular 19", "Django 5.2", "PostgreSQL", "NG-ZORRO"],
    "screens": ["SCREEN-ID"],
    "colors": {"primary": "#669B80", "dark": "#22433D"}
  },
  "objectives": ["Clear numbered objectives"],
  "tasks": ["Specific actionable tasks"],
  "guard_rails": ["Safety and security constraints"],
  "acceptance_criteria": ["Testable success conditions"],
  "definition_of_done": ["Completion requirements"],
  "out_of_scope": ["What not to include"],
  "references": ["Related files and documentation"]
}
```

Never skip this JSON conversion step - it ensures consistency and traceability across all development tasks.

## Architecture & Tech Stack
- **Backend**: Django 5.2 + Django REST Framework + Wagtail CMS with PostgreSQL
- **Frontend**: Angular 19 (CSR first, SSR via Angular Universal later) with NG-ZORRO and i18n (EN/AR)
- **UI Framework**: NG-ZORRO (Ant Design for Angular) with CSS-in-JS theming and RTL support
- **Search**: Meilisearch v1.6 for full-text search via Celery background tasks
- **Storage**: MinIO (S3-compatible) for development, Alibaba OSS for production
- **Auth**: Auth0 (SPA SDK on Angular, OIDC/JWKS validation on Django)
- **Background Tasks**: Celery with Redis broker for indexing and analytics
- **Deployment**: Docker Compose (dev), DigitalOcean DOKS (initial prod), Alibaba Cloud ACK (future prod)
- **Infrastructure**: DigitalOcean (initial production), Alibaba Cloud (migration target)

## UI/UX Design System - NG-ZORRO (Ant Design for Angular)

### Design Principles
- **Clarity**: Clear visual hierarchy with consistent NG-ZORRO component patterns
- **Efficiency**: Streamlined workflows using NG-ZORRO's comprehensive component library
- **Controllability**: Users maintain control through predictable Angular + NG-ZORRO interactions
- **Certainty**: Reliable interface behaviors following Ant Design specifications adapted for Angular

### Brand Color Integration
- **Primary Brand**: #669B80 (Itqan Green) - mapped to Ant Design's colorPrimary token
- **Dark Accent**: #22433D (Itqan Dark Green) - used for emphasis and dark theme
- **Theme Configuration**:
  ```typescript
  // Angular NG-ZORRO theme configuration
  export const itqanTheme = {
    primaryColor: '#669B80',
    successColor: '#52c41a',
    warningColor: '#faad14', 
    errorColor: '#ff4d4f',
    borderRadius: '6px',
    fontFamily: {
      en: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
      ar: '"Noto Sans Arabic", "IBM Plex Sans Arabic", sans-serif'
    }
  };
  ```

### Component Usage Standards
- **Forms**: Always use NG-ZORRO nz-form, nz-input, nz-select, nz-date-picker components
- **Navigation**: Use nz-menu, nz-breadcrumb, nz-steps, nz-pagination components
- **Data Display**: Use nz-table, nz-list, nz-card, nz-descriptions, nz-tag components
- **Feedback**: Use nz-message, nz-notification, nz-modal, nz-drawer, nz-alert components
- **Layout**: Use nz-space, nz-divider, nz-row, nz-col with 8px grid system

### Typography & Spacing
- **Arabic Fonts**: 'Noto Sans Arabic', 'IBM Plex Sans Arabic', sans-serif
- **English Fonts**: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif
- **Base Grid**: 8px spacing system (8px, 16px, 24px, 32px, 48px, 64px)
- **Line Heights**: Follow Ant Design's 1.5715 base for optimal readability

## Code Quality & Standards

### General Principles
- Follow existing patterns in the codebase - don't reinvent the wheel
- Prioritize code reuse and modularity
- Write self-documenting code with clear variable and function names
- Use TypeScript strictly - avoid `any` types
- Follow established naming conventions in the project

### Django-Specific Rules
- Use Django's signals and middleware patterns appropriately
- Leverage Django REST Framework for all API endpoints
- Follow Django 5.2 patterns for models, views, and serializers
- Use environment variables for all configuration (never hardcode values)
- Implement proper error handling and validation in API endpoints
- Use Wagtail CMS for content management and editorial workflows

### Angular Best Practices
- Use Angular 19 standalone components pattern consistently
- Implement Angular Signals for reactive state management
- Use NG-ZORRO components following design system guidelines
- Leverage Angular Universal for SSR when SEO is required
- Follow Angular i18n patterns for bilingual EN/AR support
- Use Angular Services for API communication and state management

### Database & Content Modeling
- Use UUIDs for primary keys consistently
- Implement soft deletes with status fields rather than hard deletes
- Follow established content type patterns from existing models
- Use proper field validations and constraints
- Maintain referential integrity with proper relations

## Internationalization (i18n)
- Support English (en) and Arabic (ar) locales
- Use Django's i18n framework with .po files for backend localization
- Use Angular i18n with XLIFF/JSON files for frontend localization
- Implement proper RTL support for Arabic content in NG-ZORRO components
- Follow established translation patterns in both Django templates and Angular components
- Test bilingual functionality thoroughly across backend and frontend

## Authentication & Security
- Use Auth0 SPA SDK on Angular frontend for user authentication
- Use Auth0 OIDC/JWKS validation on Django backend for API security
- Store secrets in environment variables only
- Implement proper RBAC with defined roles: Admin, Publisher, Developer, Reviewer
- Use HTTPS everywhere and validate all inputs
- Follow established JWT token patterns for API authentication

## Development Workflow
- Reference existing task JSON files in ai-memory-bank/tasks/ for implementation patterns
- Follow the established Docker Compose setup for local development
- Use existing environment variable patterns from env.dev.example
- Test changes with `docker compose up --build` before committing
- Follow existing file structure and naming conventions

## Task Execution Guidelines
- **ALWAYS** convert user prompts to JSON format before starting work
- Always read related task JSON files in ai-memory-bank/tasks/ before starting
- Follow the established prompt structure and acceptance criteria
- **MANDATORY STATUS TRACKING**: 
  - When starting a task: Update status from "todo" to "in-progress" in ai-memory-bank/tasks.csv
  - When completing a task: Update status from "in-progress" to "completed" in ai-memory-bank/tasks.csv
- **MANDATORY TASK COMPLETION DOCUMENTATION**:
  - When completing any task, create a summary document in `./docs/md/`
  - Use naming convention: `{task-number}-{short-description}.md`
  - Include task objectives, what was accomplished, testing results, and next steps
  - Examples: `1-user-registration.md`, `5-dashboard-welcome.md`, `12-api-key-management.md`
- Reference existing similar implementations before writing new code
- Test bilingual functionality for any user-facing features

## File Structure Conventions
```
backend/                # Django + Wagtail backend
â”œâ”€â”€ apps/              # Django apps (accounts, content, licensing, analytics)
â”œâ”€â”€ config/            # Django settings and configuration
â”œâ”€â”€ requirements.txt   # Python dependencies
â””â”€â”€ Dockerfile.dev     # Development container

frontend/              # Angular 19 frontend  
â”œâ”€â”€ src/app/           # Angular application structure
â”œâ”€â”€ src/components/    # Reusable NG-ZORRO components
â”œâ”€â”€ package.json       # Node.js dependencies
â””â”€â”€ Dockerfile.dev     # Development container

ai-memory-bank/        # Task management
â”œâ”€â”€ tasks.csv          # Main task tracking
â””â”€â”€ tasks/             # Detailed task specifications

docs/                  # Project documentation
â”œâ”€â”€ diagrams/          # C4 architecture diagrams
â””â”€â”€ md/                # Task completion summaries (required)
```

## Testing & Quality Assurance

### Systematic Testing Methodology
Every task must include comprehensive testing using multiple approaches:

#### 1. cURL Testing Protocol
- **GET Requests**: Test page accessibility and response headers
- **POST Requests**: Validate form submissions and API endpoints
- **Error Handling**: Test invalid inputs and edge cases
- **Authentication**: Test protected routes and token handling

```bash
# Example testing sequence:
curl -i http://localhost:3000/register                    # Test page access
curl -X POST http://localhost:3000/register \            # Test form submission
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "firstName=Test&email=test@example.com"
curl -i http://localhost:3000/api/auth/login             # Test Auth0 endpoints
```

#### 2. Browser Testing Requirements
- Test all features in both English and Arabic
- Verify RTL layout works correctly for Arabic content
- Ensure responsive design works on mobile/tablet/desktop
- Test JavaScript functionality and user interactions
- Validate form validation and error states

#### 3. Infrastructure Testing
- Test Docker Compose stack functionality
- Validate service connectivity (PostgreSQL, MinIO, Meilisearch)
- Test environment variable configuration
- Verify port accessibility and service health

#### 4. API Testing Protocol
- Validate API endpoints with proper authentication
- Test role-based permissions thoroughly
- Test rate limiting and security constraints
- Validate request/response formats and error codes

#### 5. Integration Testing
- Test end-to-end user flows (registration â†’ login â†’ dashboard)
- Validate Auth0 â†’ Strapi â†’ Next.js integration
- Test database operations and data consistency
- Test file upload and storage workflows

#### 6. Error Diagnosis Protocol
When issues are found:
1. **Identify**: Log the exact error message and HTTP status
2. **Isolate**: Test individual components separately
3. **Debug**: Check environment variables and configuration
4. **Fix**: Implement graceful error handling
5. **Verify**: Re-test the entire flow end-to-end

#### 7. Documentation Requirements
- Document all test procedures in task completion
- Include cURL commands for API testing
- Record environment setup requirements
- Update troubleshooting guides with solutions

## Performance Considerations
- Use Redis caching for Celery task queue and session storage
- Optimize images and assets with CDN integration (Alibaba OSS/CDN)
- Implement proper pagination for content listings in Django REST API
- Use database indexes for frequently queried fields
- Leverage Angular OnPush change detection and lazy loading
- Use MeiliSearch for fast full-text search instead of database queries

## Error Handling
- Implement graceful error handling throughout the application
- Use proper HTTP status codes
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle edge cases and validation failures

## Documentation
- Update README files when changing setup procedures
- Document any new environment variables in env.dev.example
- Keep API documentation current with changes
- Update C4 diagrams if architecture changes significantly

## References
- Main documentation: docs/Itqan_CMS_BRD.md and docs/Itqan_CMS_BRS.md
- Architecture: docs/diagrams/ (C4 model diagrams + ER/API Mermaid files)
- Database Schema: docs/diagrams/high-level-db-components-relationship.mmd
- API Design: docs/diagrams/api-surface-overview.mmd
- Setup: README-Docker.md for development environment
- Tasks: ai-memory-bank/tasks.csv and individual JSON files (1-30)
- English wireframes: ai-memory-bank/tasks/screens/en/*.html

Remember: Always reference existing patterns and implementations before creating new solutions. The goal is consistency and code reuse across the entire project.