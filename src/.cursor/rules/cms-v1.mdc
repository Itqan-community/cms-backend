---
alwaysApply: true
---

# CMS V1 Rules

### Interaction protocol
1) First response to any user message:
- Ask clarifying questions needed to fully understand the task.
- Number of questions depends on complexity; ask only what is necessary.
- Do not take any action (no edits, commands, or irreversible steps) until answers are received.

2) After clarifications are provided:
- Convert the request and clarifications into a single JSON object using the schema below.
- Display the JSON to the user before acting, in a fenced json code block.
- Then act on the task, using the JSON as the source of truth. If anything remains ambiguous, ask a brief follow-up before acting.

3) Ongoing:
- If new information arrives, update and redisplay the JSON before any further action.

## Project Overview
- **Mission**: Build platform for Quranic data distribution
- **Two main actors**: Publishers (upload data) and Consumers/Developers (access data)
- **Non-profit**: Community-first, open-source approach
- **Website**: www.itqan.dev

## Database Design
- **ER diagram**: Maintained in `ai-memory-bank/docs/db-design/db_design_v1.drawio`
- **Schema updates**: Edit diagram file, keep rules high-level
- **Database**: PostgreSQL recommended
- **IDs**: Use UUIDs as primary keys
- **Naming**: snake_case for tables/columns

## Wireframes
- **UI/UX designs**: Available in `ai-memory-bank/docs/screens/`
- **Screen coverage**: Authentication flows, asset listings, publisher details, resource details
- **Design system**: Consistent visual language across all screens

## V1 Scope & Constraints
- **Resources**: Auto-granted CC0 license (manual licensing later)
- **Processing**: Semi-manual resource processing by team
- **Distribution**: File downloads (APIs/packages later)
- **Access**: Auto-approve requests initially
- **Roles**: Owner + Manager only (expand later)

## Technical Stack
- **Frontend**: Next.js 15 + React 19 with SSR/SSG, Tailwind CSS, TypeScript
  - UI: shadcn/ui + Radix UI components
  - I18n: Built-in RTL/LTR support (Arabic/English)
  - Styling: CSS logical properties for RTL compatibility
- **Backend**: Django + Django REST Framework for APIs
  - Admin: Custom admin interface
- **Authentication**: Auth0
  - Frontend: Auth0 React SDK
  - Django: OIDC/JWKS verification
- **Search**: Meilisearch via Celery indexers on Django signals
- **Storage**: django-storages integration
  - Dev: MinIO
  - Prod: Alibaba OSS
- **Database**: PostgreSQL
  - UUID primary keys
  - Soft deletes pattern
  - i18n content support
- **Infrastructure**:
  - Dev: Docker Compose
  - Prod: K8s/ACK with API Gateway
  - CDN for media assets

## Prompt Structure Protocol
- **Before starting any task**: Convert user prompt to structured format
- **Required JSON structure**:
```json
{
  "prompt": "Clear description of the autonomous task to complete",
  "context": {
    "project": "Itqan CMS",
    "feature": "Feature name", 
    "auth_model": "Auth0 Hybrid (SPA + M2M)",
    "tech_stack": ["Next.js 15", "React 19", "Django 5.2", "PostgreSQL", "Tailwind CSS", "shadcn/ui"],
    "screens": ["SCREEN-ID"],
    "colors": {"primary": "#669B80", "dark": "#22433D"}
  },
  "objectives": ["Clear numbered objectives"],
  "tasks": ["Specific actionable tasks"],
  "guard_rails": ["Safety and security constraints"],
  "acceptance_criteria": ["Testable success conditions"],
  "definition_of_done": ["Completion requirements"],
  "out_of_scope": ["What not to include"],
  "references": ["Related files and documentation"]
}
```
- Ask questions to confirm your understanding of task before proceeding

## Development Guidelines
- **Migration policy**: Never drop columns, mark deprecated
- **Django Migrations**: ALWAYS use `python manage.py makemigrations` command for creating migrations
- **Migration Workflow**: 
  - Create migrations: `python manage.py makemigrations`
  - Apply migrations: `python manage.py migrate`
  - NEVER manually create migration files
- **Scaling**: Design for read-heavy workloads
- **Security**: Separate admin/public interfaces
- **Testing**: Test Publisher and Consumer workflows separately
- **Documentation**: Generate API docs from processed resources
- **AI-Human Balance**: Set clear objectives, balance AI insights with human judgment, and limit data review to avoid information overload
- **Internationalization**: All features must support Arabic (RTL) and English (LTR) layouts
- **RTL Compliance**: Use CSS logical properties, proper text alignment, and direction-aware layouts
- **Type Safety**: Maintain strict TypeScript typing across frontend and API contracts

## Development Workflow

### Branch Strategy & Protection Rules
- **main**: Production-ready code, **MERGE-ONLY** from staging
- **staging**: Pre-production branch, **MERGE-ONLY** from develop
- **develop**: Primary development branch for new features and bug fixes
- **feature/***: Feature branches created from develop, merged back to develop

### üîí ENFORCED Git Workflow Rules
**CRITICAL**: These rules are strictly enforced and cannot be bypassed:

1. **Branch Protection**:
   - ‚ùå **main** and **staging** branches: NO direct commits/pushes allowed
   - ‚úÖ **develop** branch: Direct commits allowed for active development
   - ‚úÖ **feature/** branches: Direct commits allowed for feature development

2. **Mandatory Change Flow**:
   - ALL changes MUST start on `develop` branch (or feature branch created from develop)
   - Changes MUST be tested locally BEFORE any remote push
   - Changes MUST commit with descriptive but concise messages
   - Changes MUST push to `origin/develop` after local testing passes

3. **Branch Transition Rules**:
   - `develop` ‚Üí `staging`: ONLY via Pull Request + code review
   - `staging` ‚Üí `main`: ONLY via Pull Request + code review  
   - `feature/*` ‚Üí `develop`: Via Pull Request or direct merge after testing

4. **CMS Rules File Updates**:
   - When CMS rules are modified, automatic commit with message "Update CMS workflow rules"
   - Must test locally immediately after rules change
   - Must push to develop origin once local testing confirms functionality

### Development Process (MANDATORY SEQUENCE)

#### Step 1: Local Development
```bash
# Ensure you're on develop branch
git checkout develop
git pull origin develop

# Make your changes
# ... code changes ...

# Test locally FIRST
./dev.sh  # or appropriate local test command
# Verify at http://local.cms.itqan.dev:8000
```

#### Step 2: Commit & Local Validation
```bash
# Commit with descriptive message
git add .
git commit -m "Brief descriptive message"

# MANDATORY: Test locally again after commit
./dev.sh
# Full functionality test required
```

#### Step 3: Push to Develop
```bash
# Only push after local testing passes
git push origin develop
```

#### Step 4: Environment Promotion (Optional)
```bash
# Staging promotion (via PR only)
gh pr create --base staging --head develop --title "Promote to staging"

# Production promotion (via PR only)  
gh pr create --base main --head staging --title "Release to production"
```

### Deployment Rules (ENFORCED)
üîí **Strict branch flow enforcement via GitHub Actions:**
1. **main** can ONLY be updated from **staging** via Pull Request
2. **staging** can ONLY be updated from **develop** via Pull Request  
3. **develop** allows direct pushes for active development
4. Deployment triggers ONLY on successful PR merges (not direct pushes)
5. Manual deployment available ONLY for develop branch (emergency hotfixes)

### Environment Mapping
- **develop** branch ‚Üí `https://dev.cms.itqan.dev`
- **staging** branch ‚Üí `https://staging.cms.itqan.dev`
- **main** branch ‚Üí `https://cms.itqan.dev`
- **local** development ‚Üí `http://local.cms.itqan.dev:8000` (add hosts entry: `local.cms.itqan.dev` ‚Üí `127.0.0.1`)

### Testing Requirements (MANDATORY)
- ‚úÖ **Local testing**: MUST pass before any remote push
- ‚úÖ **Functionality testing**: All existing features must remain working
- ‚úÖ **New feature testing**: Thoroughly test in isolation and integration
- ‚úÖ **Manual testing**: Critical user workflows must be manually verified
- ‚úÖ **Regression testing**: Ensure no existing functionality breaks

### Violation Consequences
- Direct commits to `main` or `staging`: **Immediate revert required**
- Pushing untested code: **Rollback and re-test locally**
- Skipping local testing: **Deployment block until proper testing**

## Environments & URLs
- Production: `https://cms.itqan.dev`
- Staging: `https://staging.cms.itqan.dev`
- Develop: `https://dev.cms.itqan.dev`
- Local: `http://local.cms.itqan.dev:8000` (add hosts entry mapping `local.cms.itqan.dev` ‚Üí `127.0.0.1`)

