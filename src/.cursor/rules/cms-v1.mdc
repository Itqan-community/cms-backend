---
alwaysApply: true
---

# CMS V1 Rules

### Interaction protocol
1) First response to any user message:
- Ask clarifying questions needed to fully understand the task.
- Number of questions depends on complexity; ask only what is necessary.
- Do not take any action (no edits, commands, or irreversible steps) until answers are received.

2) After clarifications are provided:
- Convert the request and clarifications into a single JSON object using the schema below.
- Display the JSON to the user before acting, in a fenced json code block.
- Then act on the task, using the JSON as the source of truth. If anything remains ambiguous, ask a brief follow-up before acting.

3) Ongoing:
- If new information arrives, update and redisplay the JSON before any further action.

## Project Overview
- **Mission**: Build platform for Quranic data distribution
- **Two main actors**: Publishers (upload data) and Consumers/Developers (access data)
- **Non-profit**: Community-first, open-source approach
- **Website**: www.itqan.dev

## Database Design
- **ER diagram**: Maintained in `ai-memory-bank/docs/db-design/db_design_v1.drawio`
- **Schema updates**: Edit diagram file, keep rules high-level
- **Database**: PostgreSQL recommended
- **IDs**: Use UUIDs as primary keys
- **Naming**: snake_case for tables/columns

## Wireframes
- **UI/UX designs**: Available in `ai-memory-bank/docs/screens/`
- **Screen coverage**: Authentication flows, asset listings, publisher details, resource details
- **Design system**: Consistent visual language across all screens

## V1 Scope & Constraints
- **Resources**: Auto-granted CC0 license (manual licensing later)
- **Processing**: Semi-manual resource processing by team
- **Distribution**: File downloads (APIs/packages later)
- **Access**: Auto-approve requests initially
- **Roles**: Owner + Manager only (expand later)

## Technical Stack
- **Frontend**: Next.js 15 + React 19 with SSR/SSG, Tailwind CSS, TypeScript
  - UI: shadcn/ui + Radix UI components
  - I18n: Built-in RTL/LTR support (Arabic/English)
  - Styling: CSS logical properties for RTL compatibility
- **Backend**: Django + Django REST Framework for APIs
  - Admin: Custom admin interface
- **Authentication**: Auth0
  - Frontend: Auth0 React SDK
  - Django: OIDC/JWKS verification
- **Search**: Meilisearch via Celery indexers on Django signals
- **Storage**: django-storages integration
  - Dev: MinIO
  - Prod: Alibaba OSS
- **Database**: PostgreSQL
  - UUID primary keys
  - Soft deletes pattern
  - i18n content support
- **Infrastructure**:
  - Dev: Docker Compose
  - Prod: K8s/ACK with API Gateway
  - CDN for media assets

## Prompt Structure Protocol
- **Before starting any task**: Convert user prompt to structured format
- **Required JSON structure**:
```json
{
  "prompt": "Clear description of the autonomous task to complete",
  "context": {
    "project": "Itqan CMS",
    "feature": "Feature name", 
    "auth_model": "Auth0 Hybrid (SPA + M2M)",
    "tech_stack": ["Next.js 15", "React 19", "Django 5.2", "PostgreSQL", "Tailwind CSS", "shadcn/ui"],
    "screens": ["SCREEN-ID"],
    "colors": {"primary": "#669B80", "dark": "#22433D"}
  },
  "objectives": ["Clear numbered objectives"],
  "tasks": ["Specific actionable tasks"],
  "guard_rails": ["Safety and security constraints"],
  "acceptance_criteria": ["Testable success conditions"],
  "definition_of_done": ["Completion requirements"],
  "out_of_scope": ["What not to include"],
  "references": ["Related files and documentation"]
}
```
- Ask questions to confirm your understanding of task before proceeding

## Development Guidelines
- **Migration policy**: Never drop columns, mark deprecated
- **Scaling**: Design for read-heavy workloads
- **Security**: Separate admin/public interfaces
- **Testing**: Test Publisher and Consumer workflows separately
- **Documentation**: Generate API docs from processed resources
- **AI-Human Balance**: Set clear objectives, balance AI insights with human judgment, and limit data review to avoid information overload
- **Internationalization**: All features must support Arabic (RTL) and English (LTR) layouts
- **RTL Compliance**: Use CSS logical properties, proper text alignment, and direction-aware layouts
- **Type Safety**: Maintain strict TypeScript typing across frontend and API contracts

## Development Workflow
### Branch Strategy
- **develop**: Primary development branch for new features and bug fixes
- **staging**: Pre-production branch for final testing and validation
- **main**: Production-ready code, only updated through PRs from staging

### Development Process
1. **Local Development** (`develop` branch):
   - Make all changes on the `develop` branch
   - Test fully locally on `http://local.cms.itqan.dev:8000`
   - Ensure all features work correctly before promotion
   - Run comprehensive testing (unit tests, integration tests, manual testing)

2. **Staging Promotion** (`develop` → `staging`):
   - Once satisfied with local testing, promote changes to `staging` branch
   - Deploy to staging environment: `https://staging.cms.itqan.dev`
   - Perform final validation and acceptance testing

3. **Production Promotion** (`staging` → `main`):
   - Create Pull Request from `staging` to `main` branch
   - Manual code review required before merge
   - Deploy to production: `https://cms.itqan.dev`
   - Manual deployment process (automated deployment will be added later)

### Environment Mapping
- **develop** branch → `https://dev.cms.itqan.dev`
- **staging** branch → `https://staging.cms.itqan.dev`
- **main** branch → `https://cms.itqan.dev`
- **local** development → `http://local.cms.itqan.dev:8000` (add hosts entry: `local.cms.itqan.dev` → `127.0.0.1`)

### Testing Requirements
- Full local testing must be completed before any branch promotion
- All existing functionality must remain working
- New features must be thoroughly tested in isolation and integration
- Manual testing of critical user workflows required

## Environments & URLs
- Production: `https://cms.itqan.dev`
- Staging: `https://staging.cms.itqan.dev`
- Develop: `https://dev.cms.itqan.dev`
- Local: `http://local.cms.itqan.dev:8000` (add hosts entry mapping `local.cms.itqan.dev` → `127.0.0.1`)

