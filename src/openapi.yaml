openapi: 3.1.0
info:
  title: Itqan CMS API
  version: 1.0.0
  description: |
    Content Management System API for Itqan platform - Quranic data distribution.
    - Auth via Auth0 JWT (RS256). Backend verifies via OIDC/JWKS.
    - Read-heavy design. UUID identifiers.
    - Content supports i18n. Use Accept-Language header when relevant.

servers:
  - url: https://api.cms.itqan.dev
    description: Production
  - url: https://staging.api.cms.itqan.dev
    description: Staging
  - url: https://develop.api.cms.itqan.dev
    description: Develop
  - url: http://local.cms.itqan.dev:8000
    description: Local development (requires hosts entry mapping local.cms.itqan.dev â†’ 127.0.0.1)

tags:
  - name: Auth
    description: Authentication and user management
  - name: Assets
    description: Asset management and access
  - name: Publishers
    description: Publishing organizations
  - name: Licenses
    description: License information
  - name: Content
    description: Content standards and guidelines
  - name: System
    description: System and health endpoints

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Auth0-issued JWT (RS256). Send as Authorization: Bearer <token>."

  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
          required: [code, message]
      required: [error]

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
        avatar_url:
          type: string
          format: uri
          nullable: true
        bio:
          type: string
          nullable: true
        organization:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        website:
          type: string
          format: uri
          nullable: true
        github_username:
          type: string
          nullable: true
        email_verified:
          type: boolean
        profile_completed:
          type: boolean
        auth_provider:
          type: string
      required: [id, email, name, email_verified, profile_completed, auth_provider]

    License:
      type: object
      properties:
        code:
          type: string
        name:
          type: string
        short_name:
          type: string
        url:
          type: string
          format: uri
        icon_url:
          type: string
          format: uri
        summary:
          type: string
        full_text:
          type: string
        legal_code_url:
          type: string
          format: uri
        license_terms:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              description:
                type: string
              order:
                type: integer
        permissions:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              label:
                type: string
              description:
                type: string
        conditions:
          type: array
          items:
            type: object
        limitations:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              label:
                type: string
              description:
                type: string
        usage_count:
          type: integer
        is_default:
          type: boolean
      required: [code, name]

    Publisher:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        bio:
          type: string
        thumbnail_url:
          type: string
          format: uri
        cover_url:
          type: string
          format: uri
          nullable: true
        location:
          type: string
          nullable: true
        website:
          type: string
          format: uri
          nullable: true
        verified:
          type: boolean
        social_links:
          type: object
          properties:
            twitter:
              type: string
              nullable: true
            github:
              type: string
              nullable: true
        stats:
          type: object
          properties:
            resources_count:
              type: integer
            assets_count:
              type: integer
            total_downloads:
              type: integer
            joined_at:
              type: string
              format: date-time
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
      required: [id, name, thumbnail_url, verified]

    Asset:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        long_description:
          type: string
        thumbnail_url:
          type: string
          format: uri
        category:
          type: string
          enum: [mushaf, tafsir, recitation]
        license:
          $ref: '#/components/schemas/License'
        publisher:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            thumbnail_url:
              type: string
              format: uri
            bio:
              type: string
            verified:
              type: boolean
        resource:
          type: object
          properties:
            id:
              type: integer
            title:
              type: string
            description:
              type: string
          nullable: true
        technical_details:
          type: object
          properties:
            file_size:
              type: string
            format:
              type: string
            encoding:
              type: string
            version:
              type: string
            language:
              type: string
        stats:
          type: object
          properties:
            download_count:
              type: integer
            view_count:
              type: integer
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
        access:
          type: object
          properties:
            has_access:
              type: boolean
            requires_approval:
              type: boolean
        snapshots:
          type: array
          items:
            type: object
            properties:
              thumbnail_url:
                type: string
                format: uri
              title:
                type: string
              description:
                type: string
        related_assets:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              title:
                type: string
              thumbnail_url:
                type: string
                format: uri
        has_access:
          type: boolean
        download_count:
          type: integer
        file_size:
          type: string
      required: [id, title, description, thumbnail_url, category, license, publisher, has_access]

    AccessRequest:
      type: object
      properties:
        request_id:
          type: integer
        status:
          type: string
          enum: [approved, rejected, pending]
        message:
          type: string
        access:
          type: object
          properties:
            download_url:
              type: string
            expires_at:
              type: string
              format: date-time
              nullable: true
            granted_at:
              type: string
              format: date-time
          nullable: true
      required: [request_id, status, message]

    ContentStandards:
      type: object
      properties:
        version:
          type: string
        last_updated:
          type: string
          format: date-time
        sections:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              content:
                type: string
              subsections:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    content:
                      type: string
              required_fields:
                type: array
                items:
                  type: string
              default_license:
                type: string
        file_formats:
          type: object
          properties:
            supported:
              type: array
              items:
                type: string
            recommended:
              type: array
              items:
                type: string
            specifications:
              type: object
              additionalProperties:
                type: object
                properties:
                  schema_url:
                    type: string
                    format: uri
                  example_url:
                    type: string
                    format: uri
      required: [version, last_updated, sections]

    AppConfig:
      type: object
      properties:
        version:
          type: string
        features:
          type: object
          properties:
            auto_approve_access:
              type: boolean
            manual_license_review:
              type: boolean
            advanced_analytics:
              type: boolean
            api_access:
              type: boolean
        limits:
          type: object
          properties:
            max_file_size_mb:
              type: integer
            max_files_per_resource:
              type: integer
            max_resources_per_publisher:
              type: integer
        ui:
          type: object
          properties:
            primary_color:
              type: string
            dark_color:
              type: string
            supported_locales:
              type: array
              items:
                type: string
            default_locale:
              type: string
        categories:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              name:
                type: string
              description:
                type: string
        external_links:
          type: object
          properties:
            docs:
              type: string
              format: uri
            support:
              type: string
              format: uri
            github:
              type: string
              format: uri
      required: [version, features, limits, ui, categories]

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags: [Auth]
      summary: Register with email/password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                name:
                  type: string
              required: [email, password, name]
            example:
              email: "user@example.com"
              password: "secret123"
              name: "Ahmed Hassan"
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
              example:
                access_token: "jwt_token_here"
                refresh_token: "refresh_token_here"
                user:
                  id: 1
                  email: "user@example.com"
                  name: "Ahmed Hassan"
                  email_verified: false
                  profile_completed: false
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  code: "EMAIL_TAKEN"
                  message: "Email already exists"

  /auth/login:
    post:
      tags: [Auth]
      summary: Login with email/password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required: [email, password]
            example:
              email: "user@example.com"
              password: "secret123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
              example:
                access_token: "jwt_token_here"
                refresh_token: "refresh_token_here"
                user:
                  id: 1
                  email: "user@example.com"
                  name: "Ahmed Hassan"
                  email_verified: true
                  profile_completed: true
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  code: "INVALID_CREDENTIALS"
                  message: "Invalid email or password"

  /auth/oauth/google/start:
    get:
      tags: [Auth]
      summary: Start Google OAuth flow
      responses:
        '302':
          description: Redirect to Google OAuth

  /auth/oauth/github/start:
    get:
      tags: [Auth]
      summary: Start GitHub OAuth flow
      responses:
        '302':
          description: Redirect to GitHub OAuth

  /auth/oauth/google/callback:
    get:
      tags: [Auth]
      summary: Handle Google OAuth callback
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OAuth successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /auth/oauth/github/callback:
    get:
      tags: [Auth]
      summary: Handle GitHub OAuth callback
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OAuth successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /auth/profile:
    get:
      tags: [Auth]
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 1
                email: "user@example.com"
                name: "Ahmed Hassan"
                avatar_url: "https://..."
                bio: "Developer interested in Quranic datasets"
                organization: "Tech Solutions Inc"
                location: "Cairo, Egypt"
                website: "https://example.com"
                github_username: "ahmeddev"
                email_verified: true
                profile_completed: true
                auth_provider: "email"

    put:
      tags: [Auth]
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                bio:
                  type: string
                organization:
                  type: string
                location:
                  type: string
                website:
                  type: string
                github_username:
                  type: string
            example:
              name: "Ahmed Hassan"
              bio: "Developer interested in Quranic datasets"
              organization: "Tech Solutions Inc"
              location: "Cairo, Egypt"
              website: "https://example.com"
              github_username: "ahmeddev"
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  profile:
                    type: object
                    properties:
                      id:
                        type: integer
                      profile_completed:
                        type: boolean
              example:
                message: "Profile updated successfully"
                profile:
                  id: 1
                  profile_completed: true

  /auth/token/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
              required: [refresh_token]
            example:
              refresh_token: "refresh_token_here"
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
              example:
                access_token: "new_jwt_token_here"

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout user
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logout successful

  # Assets Endpoints
  /assets:
    get:
      tags: [Assets]
      summary: List assets
      parameters:
        - name: category
          in: query
          schema:
            type: string
            enum: [mushaf, tafsir, recitation]
        - name: license_code
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of assets
          content:
            application/json:
              schema:
                type: object
                properties:
                  assets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'
              example:
                assets:
                  - id: 1
                    title: "Quran Uthmani"
                    description: "Quran Uthmani Description Summary"
                    thumbnail_url: "https://cdn.example.com/thumbnails/asset-1.jpg"
                    category: "mushaf"
                    license:
                      code: "cc0"
                      name: "CC0 - Public Domain"
                    publisher:
                      id: 1
                      name: "Tafsir Center"
                      thumbnail_url: "https://cdn.example.com/publishers/publisher-1.jpg"
                    has_access: false
                    download_count: 1250
                    file_size: "2.5 MB"

  /assets/{asset_id}:
    get:
      tags: [Assets]
      summary: Get asset details
      parameters:
        - name: asset_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Asset details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'

  /assets/{asset_id}/request-access:
    post:
      tags: [Assets]
      summary: Request asset access
      security:
        - bearerAuth: []
      parameters:
        - name: asset_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                purpose:
                  type: string
                intended_use:
                  type: string
              required: [purpose, intended_use]
            example:
              purpose: "Academic research on Quranic linguistics"
              intended_use: "non-commercial"
      responses:
        '200':
          description: Access request processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRequest'
              example:
                request_id: 123
                status: "approved"
                message: "Access granted automatically"
                access:
                  download_url: "/assets/10/download"
                  expires_at: null
                  granted_at: "2024-01-25T15:30:00Z"

  /assets/{asset_id}/download:
    get:
      tags: [Assets]
      summary: Download asset file
      security:
        - bearerAuth: []
      parameters:
        - name: asset_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: File download
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  code: "ACCESS_DENIED"
                  message: "You need to request access to download this asset"

  # Resources Endpoints
  /resources/{resource_id}/download:
    get:
      tags: [Assets]
      summary: Download original resource
      security:
        - bearerAuth: []
      parameters:
        - name: resource_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Resource download
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Publishers Endpoints
  /publishers/{publisher_id}:
    get:
      tags: [Publishers]
      summary: Get publisher details
      parameters:
        - name: publisher_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Publisher details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'

  # Licenses Endpoints
  /licenses/{license_code}:
    get:
      tags: [Licenses]
      summary: Get license by code
      parameters:
        - name: license_code
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: License details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'

  /licenses:
    get:
      tags: [Licenses]
      summary: List all licenses
      responses:
        '200':
          description: List of licenses
          content:
            application/json:
              schema:
                type: object
                properties:
                  licenses:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                        name:
                          type: string
                        short_name:
                          type: string
                        icon_url:
                          type: string
                          format: uri
                        is_default:
                          type: boolean

  # Content Standards Endpoints
  /content-standards:
    get:
      tags: [Content]
      summary: Get content standards
      responses:
        '200':
          description: Content standards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentStandards'

  # System Endpoints
  /config:
    get:
      tags: [System]
      summary: Get application configuration
      responses:
        '200':
          description: Application configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppConfig'

  /health:
    get:
      tags: [System]
      summary: Health check
      responses:
        '200':
          description: System health
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                      storage:
                        type: string
                      auth:
                        type: string
              example:
                status: "healthy"
                timestamp: "2024-01-25T15:30:00Z"
                version: "1.0.0"
                services:
                  database: "healthy"
                  storage: "healthy"
                  auth: "healthy"