# Generated by Django 4.2.23 on 2025-09-08 13:21

import apps.core.utils
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this record is active (soft delete mechanism)",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("Admin", "Admin"),
                            ("Publisher", "Publisher"),
                            ("Developer", "Developer"),
                            ("Reviewer", "Reviewer"),
                        ],
                        help_text="Role name (Admin, Publisher, Developer, Reviewer)",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the role and its responsibilities",
                    ),
                ),
                (
                    "permissions",
                    models.JSONField(
                        default=dict,
                        help_text="Role-specific permissions as JSON object",
                    ),
                ),
            ],
            options={
                "verbose_name": "Role",
                "verbose_name_plural": "Roles",
                "db_table": "accounts_role",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.AutoField(
                        help_text="Unique identifier for this user",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the user's email has been verified",
                    ),
                ),
                (
                    "profile_completed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the user has completed their profile setup",
                    ),
                ),
                ("bio", models.TextField(blank=True, help_text="User's biography")),
                (
                    "organization",
                    models.CharField(
                        blank=True, help_text="User's organization", max_length=255
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, help_text="User's location", max_length=255
                    ),
                ),
                (
                    "website",
                    models.URLField(blank=True, help_text="User's website URL"),
                ),
                (
                    "github_username",
                    models.CharField(
                        blank=True, help_text="User's GitHub username", max_length=255
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, help_text="User's phone number", max_length=20
                    ),
                ),
                (
                    "job_title",
                    models.CharField(
                        blank=True,
                        help_text="User's professional title",
                        max_length=255,
                    ),
                ),
                (
                    "avatar_url",
                    models.ImageField(
                        blank=True,
                        help_text="User's avatar image",
                        upload_to=apps.core.utils.upload_to_user_avatars,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["jpg", "jpeg", "png", "gif", "webp"]
                            )
                        ],
                    ),
                ),
                (
                    "auth_provider",
                    models.CharField(
                        choices=[
                            ("email", "Email/Password"),
                            ("google", "Google"),
                            ("github", "GitHub"),
                        ],
                        default="email",
                        help_text="Authentication provider used for this account",
                        max_length=50,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="User's email address (must be unique)",
                        max_length=254,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                (
                    "profile_data",
                    models.JSONField(
                        default=dict,
                        help_text="Additional user profile data and preferences",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this user account is active"
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp of user's last login",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this user was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this user was last updated",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        help_text="User's role in the system",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="users",
                        to="accounts.role",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "accounts_user",
                "ordering": ["-created_at"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
