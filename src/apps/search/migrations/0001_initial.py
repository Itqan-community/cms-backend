# Generated by Django 4.2.23 on 2025-09-04 09:42

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SearchIndex',
            fields=[
                ('id', models.AutoField(help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('name', models.CharField(help_text='Index name in MeiliSearch', max_length=100, unique=True)),
                ('display_name', models.CharField(help_text='Human-readable index name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of this search index')),
                ('primary_key', models.CharField(default='id', help_text='Primary key field name', max_length=50)),
                ('searchable_attributes', models.JSONField(default=list, help_text='List of attributes that can be searched')),
                ('filterable_attributes', models.JSONField(default=list, help_text='List of attributes that can be used for filtering')),
                ('sortable_attributes', models.JSONField(default=list, help_text='List of attributes that can be used for sorting')),
                ('ranking_rules', models.JSONField(default=list, help_text='Custom ranking rules for search results')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this index is active')),
                ('last_indexed', models.DateTimeField(blank=True, help_text='Last time this index was updated', null=True)),
                ('document_count', models.PositiveIntegerField(default=0, help_text='Number of documents in the index')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_indexes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Search Index',
                'verbose_name_plural': 'Search Indexes',
                'db_table': 'search_indexes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SearchConfiguration',
            fields=[
                ('id', models.AutoField(help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this record is active (soft delete mechanism)')),
                ('default_limit', models.PositiveIntegerField(default=20, help_text='Default number of search results to return', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('max_limit', models.PositiveIntegerField(default=100, help_text='Maximum number of search results allowed per request', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('suggestions_enabled', models.BooleanField(default=True, help_text='Enable search suggestions')),
                ('suggestion_min_chars', models.PositiveIntegerField(default=2, help_text='Minimum characters required for suggestions', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('suggestion_limit', models.PositiveIntegerField(default=10, help_text='Maximum number of suggestions to return', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('highlighting_enabled', models.BooleanField(default=True, help_text='Enable search result highlighting')),
                ('highlight_pre_tag', models.CharField(default='<mark>', help_text='HTML tag to start highlighting', max_length=20)),
                ('highlight_post_tag', models.CharField(default='</mark>', help_text='HTML tag to end highlighting', max_length=20)),
                ('faceting_enabled', models.BooleanField(default=True, help_text='Enable search faceting')),
                ('search_timeout', models.PositiveIntegerField(default=30, help_text='Search timeout in seconds', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(300)])),
                ('track_searches', models.BooleanField(default=True, help_text='Track search queries for analytics')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updated_search_configs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Search Configuration',
                'verbose_name_plural': 'Search Configuration',
                'db_table': 'search_configuration',
            },
        ),
        migrations.CreateModel(
            name='SearchManagement',
            fields=[
            ],
            options={
                'verbose_name': 'Search Management',
                'verbose_name_plural': 'Search Management',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('search.searchconfiguration',),
        ),
        migrations.CreateModel(
            name='SearchQuery',
            fields=[
                ('id', models.AutoField(help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this record is active (soft delete mechanism)')),
                ('query', models.CharField(help_text='The search query', max_length=500)),
                ('index_name', models.CharField(help_text='Index that was searched', max_length=100)),
                ('filters_used', models.JSONField(blank=True, default=dict, help_text='Filters applied to the search')),
                ('sort_criteria', models.CharField(blank=True, help_text='Sort criteria used', max_length=200)),
                ('results_count', models.PositiveIntegerField(default=0, help_text='Number of results returned')),
                ('processing_time', models.FloatField(blank=True, help_text='Search processing time in milliseconds', null=True)),
                ('clicked_result_id', models.CharField(blank=True, help_text='ID of result that was clicked', max_length=100)),
                ('session_id', models.CharField(blank=True, help_text='User session identifier', max_length=100)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='search_queries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Search Query',
                'verbose_name_plural': 'Search Queries',
                'db_table': 'search_queries',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['query'], name='search_quer_query_50e46f_idx'), models.Index(fields=['index_name'], name='search_quer_index_n_2b9061_idx'), models.Index(fields=['user'], name='search_quer_user_id_64dda1_idx'), models.Index(fields=['created_at'], name='search_quer_created_02141d_idx')],
            },
        ),
        migrations.CreateModel(
            name='IndexingTask',
            fields=[
                ('id', models.AutoField(help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this record is active (soft delete mechanism)')),
                ('task_id', models.CharField(help_text='Celery task ID', max_length=100, unique=True)),
                ('task_type', models.CharField(choices=[('full_rebuild', 'Full Index Rebuild'), ('incremental', 'Incremental Update'), ('bulk_import', 'Bulk Import'), ('single_document', 'Single Document Update'), ('delete_document', 'Delete Document'), ('clear_index', 'Clear Index')], help_text='Type of indexing task', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', help_text='Current task status', max_length=20)),
                ('index_name', models.CharField(help_text='Target index name', max_length=100)),
                ('document_ids', models.JSONField(blank=True, default=list, help_text='List of document IDs to process')),
                ('batch_size', models.PositiveIntegerField(blank=True, help_text='Batch size for processing', null=True)),
                ('total_documents', models.PositiveIntegerField(default=0, help_text='Total number of documents to process')),
                ('processed_documents', models.PositiveIntegerField(default=0, help_text='Number of documents processed')),
                ('error_message', models.TextField(blank=True, help_text='Error message if task failed')),
                ('execution_time', models.FloatField(blank=True, help_text='Task execution time in seconds', null=True)),
                ('started_at', models.DateTimeField(blank=True, help_text='When the task actually started', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the task completed', null=True)),
                ('started_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='started_indexing_tasks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Indexing Task',
                'verbose_name_plural': 'Indexing Tasks',
                'db_table': 'indexing_tasks',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['task_id'], name='indexing_ta_task_id_e97fdf_idx'), models.Index(fields=['status'], name='indexing_ta_status_8ce8c3_idx'), models.Index(fields=['index_name'], name='indexing_ta_index_n_09c47e_idx'), models.Index(fields=['created_at'], name='indexing_ta_created_ace9f5_idx')],
            },
        ),
    ]
