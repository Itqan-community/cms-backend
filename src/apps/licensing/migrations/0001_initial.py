# Generated by Django 4.2.23 on 2025-08-20 18:39

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('content', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this record is active (soft delete mechanism)')),
                ('license_type', models.CharField(choices=[('open', 'Open License'), ('restricted', 'Restricted License'), ('commercial', 'Commercial License')], help_text='Type of license (open, restricted, commercial)', max_length=20)),
                ('terms', models.TextField(help_text='Legal terms and conditions for using the resource')),
                ('geographic_restrictions', models.JSONField(default=dict, help_text='Geographic restrictions (allowed/restricted countries/regions)')),
                ('usage_restrictions', models.JSONField(default=dict, help_text='Usage restrictions (rate limits, attribution requirements, etc.)')),
                ('requires_approval', models.BooleanField(default=True, help_text='Whether admin approval is required for access requests')),
                ('effective_from', models.DateTimeField(default=django.utils.timezone.now, help_text='When this license becomes effective')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this license expires (null = never expires)', null=True)),
                ('resource', models.ForeignKey(help_text='Resource that this license applies to', on_delete=django.db.models.deletion.CASCADE, related_name='licenses', to='content.resource')),
            ],
            options={
                'verbose_name': 'License',
                'verbose_name_plural': 'Licenses',
                'db_table': 'license',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['resource'], name='license_resourc_bb3a2b_idx'), models.Index(fields=['license_type'], name='license_license_984d73_idx'), models.Index(fields=['requires_approval'], name='license_require_ba5f62_idx'), models.Index(fields=['effective_from'], name='license_effecti_117158_idx'), models.Index(fields=['expires_at'], name='license_expires_c22161_idx')],
            },
        ),
        migrations.CreateModel(
            name='AccessRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this record is active (soft delete mechanism)')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', help_text='Current status of the access request', max_length=20)),
                ('justification', models.TextField(help_text="Developer's use case description and justification")),
                ('admin_notes', models.TextField(blank=True, help_text='Admin review notes and feedback')),
                ('requested_at', models.DateTimeField(auto_now_add=True, help_text='When the request was submitted')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When the request was reviewed by admin', null=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When the approved access expires', null=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='Admin user who approved/rejected the request', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_access_requests', to=settings.AUTH_USER_MODEL)),
                ('distribution', models.ForeignKey(help_text='Distribution being requested', on_delete=django.db.models.deletion.CASCADE, related_name='access_requests', to='content.distribution')),
                ('requester', models.ForeignKey(help_text='Developer requesting access (must have Developer role)', on_delete=django.db.models.deletion.CASCADE, related_name='access_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Access Request',
                'verbose_name_plural': 'Access Requests',
                'db_table': 'access_request',
                'ordering': ['-requested_at'],
                'indexes': [models.Index(fields=['requester'], name='access_requ_request_b658ce_idx'), models.Index(fields=['distribution'], name='access_requ_distrib_ef01ee_idx'), models.Index(fields=['status'], name='access_requ_status_fdceb3_idx'), models.Index(fields=['requested_at'], name='access_requ_request_787a23_idx'), models.Index(fields=['reviewed_at'], name='access_requ_reviewe_5c7d36_idx')],
                'unique_together': {('requester', 'distribution')},
            },
        ),
    ]
