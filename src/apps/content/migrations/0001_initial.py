# Generated by Django 4.2.23 on 2025-09-08 13:21

import apps.core.utils
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Asset",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this record is active (soft delete mechanism)",
                    ),
                ),
                ("name", models.CharField(help_text="Asset name", max_length=255)),
                (
                    "title",
                    models.CharField(help_text="Display title for API", max_length=255),
                ),
                (
                    "title_en",
                    models.CharField(
                        help_text="Display title for API", max_length=255, null=True
                    ),
                ),
                (
                    "title_ar",
                    models.CharField(
                        help_text="Display title for API", max_length=255, null=True
                    ),
                ),
                ("description", models.TextField(help_text="Asset description")),
                (
                    "description_en",
                    models.TextField(help_text="Asset description", null=True),
                ),
                (
                    "description_ar",
                    models.TextField(help_text="Asset description", null=True),
                ),
                (
                    "long_description",
                    models.TextField(blank=True, help_text="Extended description"),
                ),
                (
                    "long_description_en",
                    models.TextField(
                        blank=True, help_text="Extended description", null=True
                    ),
                ),
                (
                    "long_description_ar",
                    models.TextField(
                        blank=True, help_text="Extended description", null=True
                    ),
                ),
                (
                    "thumbnail_url",
                    models.ImageField(
                        blank=True,
                        help_text="Asset thumbnail image",
                        upload_to=apps.core.utils.upload_to_asset_thumbnails,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["jpg", "jpeg", "png", "gif", "webp"]
                            )
                        ],
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("recitation", "Recitation"),
                            ("mushaf", "Mushaf"),
                            ("tafsir", "Tafsir"),
                        ],
                        help_text="Asset category matching resource categories",
                        max_length=20,
                    ),
                ),
                (
                    "file_size",
                    models.CharField(
                        help_text="Human readable file size e.g. '2.5 MB'",
                        max_length=50,
                    ),
                ),
                ("format", models.CharField(help_text="File format", max_length=50)),
                (
                    "encoding",
                    models.CharField(
                        default="UTF-8", help_text="Text encoding", max_length=50
                    ),
                ),
                ("version", models.CharField(help_text="Asset version", max_length=50)),
                (
                    "language",
                    models.CharField(help_text="Asset language code", max_length=10),
                ),
                (
                    "download_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of downloads"
                    ),
                ),
                (
                    "view_count",
                    models.PositiveIntegerField(default=0, help_text="Number of views"),
                ),
            ],
            options={
                "verbose_name": "Asset",
                "verbose_name_plural": "Assets",
                "db_table": "asset",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="License",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this record is active (soft delete mechanism)",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="License code e.g. 'cc0', 'cc-by-4.0'",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Full license name", max_length=255),
                ),
                (
                    "name_en",
                    models.CharField(
                        help_text="Full license name", max_length=255, null=True
                    ),
                ),
                (
                    "name_ar",
                    models.CharField(
                        help_text="Full license name", max_length=255, null=True
                    ),
                ),
                (
                    "short_name",
                    models.CharField(
                        blank=True, help_text="Abbreviated name", max_length=50
                    ),
                ),
                ("url", models.URLField(blank=True, help_text="Official license URL")),
                (
                    "icon_url",
                    models.ImageField(
                        blank=True,
                        help_text="License icon image",
                        upload_to=apps.core.utils.upload_to_license_icons,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=[
                                    "jpg",
                                    "jpeg",
                                    "png",
                                    "gif",
                                    "webp",
                                    "svg",
                                ]
                            )
                        ],
                    ),
                ),
                (
                    "summary",
                    models.TextField(blank=True, help_text="Brief license description"),
                ),
                (
                    "summary_en",
                    models.TextField(
                        blank=True, help_text="Brief license description", null=True
                    ),
                ),
                (
                    "summary_ar",
                    models.TextField(
                        blank=True, help_text="Brief license description", null=True
                    ),
                ),
                (
                    "full_text",
                    models.TextField(blank=True, help_text="Complete license text"),
                ),
                (
                    "full_text_en",
                    models.TextField(
                        blank=True, help_text="Complete license text", null=True
                    ),
                ),
                (
                    "full_text_ar",
                    models.TextField(
                        blank=True, help_text="Complete license text", null=True
                    ),
                ),
                (
                    "legal_code_url",
                    models.URLField(blank=True, help_text="Legal code URL"),
                ),
                (
                    "license_terms",
                    models.JSONField(
                        default=list, help_text="License terms as JSON array"
                    ),
                ),
                (
                    "permissions",
                    models.JSONField(
                        default=list, help_text="Permissions as JSON array"
                    ),
                ),
                (
                    "conditions",
                    models.JSONField(
                        default=list, help_text="Conditions as JSON array"
                    ),
                ),
                (
                    "limitations",
                    models.JSONField(
                        default=list, help_text="Limitations as JSON array"
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(
                        default=False, help_text="Whether this is the default license"
                    ),
                ),
            ],
            options={
                "verbose_name": "License",
                "verbose_name_plural": "Licenses",
                "db_table": "license",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PublishingOrganization",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this record is active (soft delete mechanism)",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Organization name e.g. 'Tafsir Center'",
                        max_length=255,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly slug e.g. 'tafsir-center'", unique=True
                    ),
                ),
                (
                    "icone_image_url",
                    models.ImageField(
                        blank=True,
                        help_text="Icon/logo image - used in V1 UI: Publisher Page",
                        upload_to=apps.core.utils.upload_to_organization_icons,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=[
                                    "jpg",
                                    "jpeg",
                                    "png",
                                    "gif",
                                    "webp",
                                    "svg",
                                ]
                            )
                        ],
                    ),
                ),
                (
                    "summary",
                    models.TextField(
                        blank=True,
                        help_text="Organization summary - used in V1 UI: Publisher Page",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed organization description"
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True, help_text="Organization bio for API responses"
                    ),
                ),
                (
                    "cover_url",
                    models.ImageField(
                        blank=True,
                        help_text="Cover image for organization",
                        upload_to=apps.core.utils.upload_to_organization_covers,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["jpg", "jpeg", "png", "gif", "webp"]
                            )
                        ],
                    ),
                ),
                (
                    "verified",
                    models.BooleanField(
                        default=False, help_text="Whether organization is verified"
                    ),
                ),
                (
                    "social_links",
                    models.JSONField(
                        default=dict, help_text="Social media links as JSON"
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True,
                        help_text="Contact email for the organization",
                        max_length=254,
                    ),
                ),
                (
                    "website",
                    models.URLField(blank=True, help_text="Organization website URL"),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, help_text="Organization location", max_length=255
                    ),
                ),
            ],
            options={
                "verbose_name": "Publishing Organization",
                "verbose_name_plural": "Publishing Organizations",
                "db_table": "publishing_organization",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Resource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this record is active (soft delete mechanism)",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Resource name e.g. 'Tafsir Ibn Katheer CSV'",
                        max_length=255,
                    ),
                ),
                (
                    "name_en",
                    models.CharField(
                        help_text="Resource name e.g. 'Tafsir Ibn Katheer CSV'",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "name_ar",
                    models.CharField(
                        help_text="Resource name e.g. 'Tafsir Ibn Katheer CSV'",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL slug e.g. 'tafsir-ibn-katheer-csv'"
                    ),
                ),
                ("description", models.TextField(help_text="Resource description")),
                (
                    "description_en",
                    models.TextField(help_text="Resource description", null=True),
                ),
                (
                    "description_ar",
                    models.TextField(help_text="Resource description", null=True),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("recitation", "Recitation"),
                            ("mushaf", "Mushaf"),
                            ("tafsir", "Tafsir"),
                        ],
                        help_text="Simple options in V1",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("draft", "Draft"), ("ready", "Ready")],
                        default="draft",
                        help_text="V1: ready = ready to extract Assets from",
                        max_length=20,
                    ),
                ),
                (
                    "default_license",
                    models.ForeignKey(
                        help_text="Default license for this resource",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="default_for_resources",
                        to="content.license",
                    ),
                ),
                (
                    "publishing_organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="resources",
                        to="content.publishingorganization",
                    ),
                ),
            ],
            options={
                "verbose_name": "Resource",
                "verbose_name_plural": "Resources",
                "db_table": "resource",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ResourceVersion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this record is active (soft delete mechanism)",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Version name - V1: same as resource name, V2: updates on content",
                        max_length=255,
                    ),
                ),
                ("summary", models.TextField(blank=True, help_text="Version summary")),
                (
                    "semvar",
                    models.CharField(
                        help_text="Semantic versioning e.g. '1.0.0' - core to bind with an AssetVersion",
                        max_length=20,
                    ),
                ),
                (
                    "storage_url",
                    models.FileField(
                        blank=True,
                        help_text="File storage for resource version",
                        null=True,
                        upload_to=apps.core.utils.upload_to_resource_files,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=[
                                    "pdf",
                                    "doc",
                                    "docx",
                                    "txt",
                                    "zip",
                                    "tar",
                                    "gz",
                                    "json",
                                    "xml",
                                    "csv",
                                ]
                            )
                        ],
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("csv", "CSV"),
                            ("excel", "Excel"),
                            ("json", "JSON"),
                            ("zip", "ZIP"),
                        ],
                        help_text="File type",
                        max_length=20,
                    ),
                ),
                (
                    "size_bytes",
                    models.PositiveBigIntegerField(help_text="File size in bytes"),
                ),
                (
                    "is_latest",
                    models.BooleanField(
                        default=False, help_text="Whether this is the latest version"
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="versions",
                        to="content.resource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Resource Version",
                "verbose_name_plural": "Resource Versions",
                "db_table": "resource_version",
                "ordering": ["-created_at"],
                "unique_together": {("resource", "semvar")},
            },
        ),
        migrations.CreateModel(
            name="PublishingOrganizationMember",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this record is active (soft delete mechanism)",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("owner", "Owner"), ("manager", "Manager")],
                        help_text="Member's role in the organization",
                        max_length=20,
                    ),
                ),
                (
                    "publishing_organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="content.publishingorganization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organization_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Organization Member",
                "verbose_name_plural": "Organization Members",
                "db_table": "publishing_organization_member",
            },
        ),
        migrations.AddField(
            model_name="publishingorganization",
            name="members",
            field=models.ManyToManyField(
                related_name="publishing_organizations",
                through="content.PublishingOrganizationMember",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Distribution",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this record is active (soft delete mechanism)",
                    ),
                ),
                (
                    "format_type",
                    models.CharField(
                        choices=[
                            ("REST_JSON", "REST API (JSON)"),
                            ("GraphQL", "GraphQL API"),
                            ("ZIP", "ZIP Download"),
                            ("API", "Custom API"),
                        ],
                        help_text="Format/method for accessing the resource",
                        max_length=20,
                    ),
                ),
                (
                    "endpoint_url",
                    models.URLField(
                        help_text="API endpoint or download URL for accessing content",
                        validators=[django.core.validators.URLValidator()],
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        help_text="Distribution version identifier", max_length=50
                    ),
                ),
                (
                    "access_config",
                    models.JSONField(
                        default=dict,
                        help_text="Access configuration (API keys, rate limits, authentication)",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        default=dict,
                        help_text="Format-specific metadata and configuration",
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        help_text="Resource that this distribution provides access to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="distributions",
                        to="content.resource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Distribution",
                "verbose_name_plural": "Distributions",
                "db_table": "distribution",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AssetVersion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this record is active (soft delete mechanism)",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Asset version name", max_length=255),
                ),
                (
                    "summary",
                    models.TextField(blank=True, help_text="Asset version summary"),
                ),
                (
                    "file_url",
                    models.FileField(
                        blank=True,
                        help_text="Direct file for asset",
                        null=True,
                        upload_to=apps.core.utils.upload_to_asset_files,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=[
                                    "pdf",
                                    "doc",
                                    "docx",
                                    "txt",
                                    "zip",
                                    "tar",
                                    "gz",
                                    "json",
                                    "xml",
                                    "csv",
                                ]
                            )
                        ],
                    ),
                ),
                (
                    "size_bytes",
                    models.PositiveBigIntegerField(help_text="File size in bytes"),
                ),
                (
                    "asset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="versions",
                        to="content.asset",
                    ),
                ),
                (
                    "resource_version",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="asset_versions",
                        to="content.resourceversion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Asset Version",
                "verbose_name_plural": "Asset Versions",
                "db_table": "asset_version",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AssetAccessRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this record is active (soft delete mechanism)",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "developer_access_reason",
                    models.TextField(
                        help_text="Reason for requesting access - used in V1 UI"
                    ),
                ),
                (
                    "intended_use",
                    models.CharField(
                        choices=[
                            ("commercial", "Commercial"),
                            ("non-commercial", "Non-Commercial"),
                        ],
                        help_text="Commercial or non-commercial use",
                        max_length=20,
                    ),
                ),
                (
                    "admin_response",
                    models.TextField(blank=True, help_text="Admin response message"),
                ),
                (
                    "approved_at",
                    models.DateTimeField(
                        blank=True, help_text="When request was approved", null=True
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_asset_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "asset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_requests",
                        to="content.asset",
                    ),
                ),
                (
                    "developer_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="asset_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Asset Access Request",
                "verbose_name_plural": "Asset Access Requests",
                "db_table": "asset_access_request",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AssetAccess",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "granted_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When access was granted"
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When access expires (null = never expires)",
                        null=True,
                    ),
                ),
                (
                    "download_url",
                    models.URLField(blank=True, help_text="Direct download URL"),
                ),
                (
                    "asset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_accesses",
                        to="content.asset",
                    ),
                ),
                (
                    "asset_access_request",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_grant",
                        to="content.assetaccessrequest",
                    ),
                ),
                (
                    "effective_license",
                    models.ForeignKey(
                        help_text="License snapshot at time of access grant",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="content.license",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="asset_accesses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Asset Access",
                "verbose_name_plural": "Asset Accesses",
                "db_table": "asset_access",
                "ordering": ["-granted_at"],
            },
        ),
        migrations.AddField(
            model_name="asset",
            name="license",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="assets",
                to="content.license",
            ),
        ),
        migrations.AddField(
            model_name="asset",
            name="resource",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="assets",
                to="content.resource",
            ),
        ),
        migrations.CreateModel(
            name="UsageEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this record is active (soft delete mechanism)",
                    ),
                ),
                (
                    "usage_kind",
                    models.CharField(
                        choices=[
                            ("file_download", "File Download"),
                            ("view", "View"),
                            ("api_access", "API Access"),
                        ],
                        help_text="Type of usage event",
                        max_length=20,
                    ),
                ),
                (
                    "subject_kind",
                    models.CharField(
                        choices=[("resource", "Resource"), ("asset", "Asset")],
                        help_text="Whether tracking resource or asset",
                        max_length=20,
                    ),
                ),
                (
                    "resource_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Resource ID if subject_kind = 'resource'",
                        null=True,
                    ),
                ),
                (
                    "asset_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Asset ID if subject_kind = 'asset'",
                        null=True,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        default=dict, help_text="Additional event metadata"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, help_text="User IP address", null=True
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="User browser/client information"
                    ),
                ),
                (
                    "developer_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usage_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Usage Event",
                "verbose_name_plural": "Usage Events",
                "db_table": "usage_event",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["developer_user"], name="usage_event_develop_c4c697_idx"
                    ),
                    models.Index(
                        fields=["usage_kind"], name="usage_event_usage_k_0860e4_idx"
                    ),
                    models.Index(
                        fields=["subject_kind"], name="usage_event_subject_a3f3a7_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="usage_event_created_9daa75_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="resource",
            index=models.Index(
                fields=["publishing_organization"], name="resource_publish_67bd6a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="resource",
            index=models.Index(fields=["category"], name="resource_categor_4c6208_idx"),
        ),
        migrations.AddIndex(
            model_name="resource",
            index=models.Index(fields=["status"], name="resource_status_8a560f_idx"),
        ),
        migrations.AddIndex(
            model_name="resource",
            index=models.Index(fields=["slug"], name="resource_slug_d4d98d_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="publishingorganizationmember",
            unique_together={("publishing_organization", "user")},
        ),
        migrations.AddIndex(
            model_name="distribution",
            index=models.Index(
                fields=["resource"], name="distributio_resourc_32bf89_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="distribution",
            index=models.Index(
                fields=["format_type"], name="distributio_format__1d42b7_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="distribution",
            unique_together={("resource", "format_type", "version")},
        ),
        migrations.AlterUniqueTogether(
            name="assetaccessrequest",
            unique_together={("developer_user", "asset")},
        ),
        migrations.AlterUniqueTogether(
            name="assetaccess",
            unique_together={("user", "asset")},
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["resource"], name="asset_resourc_df618f_idx"),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["category"], name="asset_categor_8ed784_idx"),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(fields=["license"], name="asset_license_f80b48_idx"),
        ),
    ]
