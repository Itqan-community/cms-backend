{
  "task_id": 6,
  "task_name": "Asset and AssetVersion Models",
  "description": "Implement Asset and AssetVersion models with proper relationships", 
  "priority": "High",
  "estimated_hours": 8,
  "status": "Not Started",
  "dependencies": [1],
  "detailed_requirements": {
    "objective": "Create Asset and AssetVersion models that align with OpenAPI Asset schema and ERD specifications",
    "asset_model": {
      "core_purpose": "Individual downloadable items extracted from resources",
      "erd_relationships": [
        "publishing_organization_id: int (FK to PublishingOrganization)",
        "license_id: int (FK to License)"
      ],
      "api_required_fields": [
        "id", "title", "description", "long_description",
        "thumbnail_url", "category", "file_size", "format",
        "encoding", "version", "language", "download_count", "view_count"
      ],
      "technical_details": {
        "file_size": "Human readable format (e.g. '2.5 MB')",
        "format": "File format (json, xml, pdf, mp3, etc)",
        "encoding": "Text encoding (default UTF-8)",
        "version": "Asset version identifier",
        "language": "Language code (ar, en, etc)"
      }
    },
    "asset_version_model": {
      "erd_fields": [
        "id (integer primary key)",
        "asset_id: int (FK to Asset)",
        "resource_version_id: int (FK to ResourceVersion)",
        "name: string",
        "summary: text", 
        "file_url: string (direct URL to asset file)",
        "size_bytes: int",
        "created_at: datetime",
        "updated_at: datetime"
      ],
      "relationship_logic": {
        "asset_to_resource": "Assets are extracted from specific ResourceVersions",
        "versioning_alignment": "AssetVersion.resource_version_id links to ResourceVersion.semvar",
        "file_storage": "Direct URLs for individual asset files"
      }
    }
  },
  "openapi_alignment": {
    "asset_schema": "Must match Asset schema in openapi.yaml exactly",
    "asset_summary_schema": "Must support AssetSummary for listings",
    "required_nested_objects": [
      "license: LicenseSummary",
      "publisher: PublisherSummary", 
      "snapshots: AssetSnapshot[]",
      "technical_details: AssetTechnicalDetails",
      "stats: AssetStats",
      "access: AssetAccess",
      "related_assets: RelatedAsset[]"
    ]
  },
  "business_logic": {
    "asset_extraction": "Assets are derived from ResourceVersions during processing",
    "publisher_inheritance": "Asset.publishing_organization matches its ResourceVersion.resource.publishing_organization",
    "license_inheritance": "Asset.license can inherit from Resource.default_license or be overridden",
    "category_matching": "Asset.category must match parent Resource.category"
  },
  "api_functionality": {
    "asset_listing": "/assets endpoint with filtering by category, license",
    "asset_details": "/assets/{id} endpoint with full Asset schema",
    "asset_snapshots": "Preview images/content for assets",
    "related_assets": "Algorithm to find related assets",
    "download_tracking": "Integration with UsageEvent for analytics"
  },
  "migration_considerations": {
    "existing_assets": "May have assets in current system to migrate",
    "relationship_updates": "Ensure all assets point to correct organizations",
    "data_integrity": "Validate all asset-resource relationships are correct"
  },
  "acceptance_criteria": [
    "Asset model matches OpenAPI Asset schema exactly",
    "AssetVersion model links properly to ResourceVersion",
    "Publisher relationship points to PublishingOrganization",
    "Asset listings API returns correct AssetSummary format",
    "Asset details API returns full Asset schema",
    "Asset snapshots and technical details work correctly",
    "Related assets algorithm functions properly"
  ]
}
