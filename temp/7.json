{
  "task_id": 7,
  "task_name": "Access Control Models",
  "description": "Create AssetAccessRequest and AssetAccess models for permission workflow",
  "priority": "High",
  "estimated_hours": 8,
  "status": "Not Started", 
  "dependencies": [1],
  "detailed_requirements": {
    "objective": "Implement complete asset access control system with request/approval workflow",
    "asset_access_request_model": {
      "erd_fields": [
        "id (integer primary key)",
        "developer_user_id: int (FK to User)",
        "asset_id: int (FK to Asset)",
        "status: enum('pending', 'approved', 'rejected')",
        "developer_access_reason: text (used in V1 UI)",
        "intended_use: enum('commercial', 'non-commercial')",
        "admin_response: text",
        "approved_at: datetime",
        "approved_by_id: int (FK to User)",
        "created_at: datetime",
        "updated_at: datetime"
      ],
      "business_rules": [
        "One request per user per asset (unique constraint)",
        "V1: Auto-approval for all requests",
        "Request includes purpose and intended use",
        "Admin can provide response message"
      ]
    },
    "asset_access_model": {
      "erd_fields": [
        "id (integer primary key)",
        "asset_access_request_id: int (FK to AssetAccessRequest, OneToOne)",
        "user_id: int (FK to User)",
        "asset_id: int (FK to Asset)",
        "effective_license_id: int (FK to License)",
        "granted_at: datetime",
        "expires_at: datetime (nullable)",
        "download_url: string",
        "created_at: datetime",
        "updated_at: datetime"
      ],
      "license_snapshot": "effective_license_id captures license at time of access grant",
      "access_rules": [
        "Created when AssetAccessRequest is approved",
        "One access grant per user per asset",
        "Download URL may be time-limited or permanent",
        "V1: No expiration (expires_at = null)"
      ]
    }
  },
  "api_integration": {
    "request_access_endpoint": {
      "path": "/assets/{asset_id}/request-access",
      "method": "POST",
      "request_body": {
        "purpose": "string (reason for access)",
        "intended_use": "enum(commercial, non-commercial)"
      },
      "response": "AccessRequestResponse schema from OpenAPI"
    },
    "download_endpoint": {
      "path": "/assets/{asset_id}/download", 
      "method": "GET",
      "requires": "Valid AssetAccess for authenticated user",
      "response": "Binary file download with proper headers"
    }
  },
  "v1_workflow": {
    "auto_approval": "All access requests automatically approved",
    "immediate_access": "User gets download URL immediately upon request",
    "no_manual_review": "No admin intervention required in V1",
    "usage_tracking": "All downloads tracked in UsageEvent"
  },
  "openapi_alignment": {
    "access_request_response": {
      "request_id": "integer",
      "status": "enum(approved, rejected, pending)",
      "message": "string",
      "access": {
        "download_url": "string",
        "expires_at": "datetime or null",
        "granted_at": "datetime"
      }
    },
    "asset_access_property": {
      "has_access": "boolean (check if user has valid AssetAccess)",
      "requires_approval": "boolean (always false in V1)"
    }
  },
  "workflow_implementation": {
    "request_creation": "User submits access request via API",
    "auto_approval": "System automatically approves in V1",
    "access_grant": "AssetAccess created with download URL",
    "download_tracking": "UsageEvent created on each download",
    "license_snapshot": "Capture current asset license in effective_license_id"
  },
  "acceptance_criteria": [
    "AssetAccessRequest model captures all required data",
    "AssetAccess model properly links to request and captures license",
    "API request-access endpoint works with auto-approval",
    "Download endpoint validates access and serves files",
    "License snapshots preserve terms at time of access",
    "Usage events properly track downloads",
    "Unique constraints prevent duplicate requests/access"
  ]
}
