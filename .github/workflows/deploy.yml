name: Deploy to DigitalOcean

on:
  # Deployment triggered by pull request merges to enforce branch flow
  pull_request:
    types: [closed]
    branches: [develop, staging, main]
  
  # Allow manual deployment trigger for develop branch only (for hotfixes)
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy (develop only)'
        required: true
        default: 'develop'
        type: choice
        options:
          - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run if PR was merged or manual dispatch
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      (github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Validate branch flow rules
        run: |
          echo "🔍 Validating deployment rules..."
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
            HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"
            
            echo "   Pull Request: $HEAD_BRANCH → $BASE_BRANCH"
            
            # Rule 1: Main can only receive merges from staging
            if [[ "$BASE_BRANCH" == "main" && "$HEAD_BRANCH" != "staging" ]]; then
              echo "❌ ERROR: Production (main) can only be updated from staging branch"
              echo "   Attempted: $HEAD_BRANCH → main"
              echo "   Required: staging → main"
              exit 1
            fi
            
            # Rule 2: Staging can only receive merges from develop
            if [[ "$BASE_BRANCH" == "staging" && "$HEAD_BRANCH" != "develop" ]]; then
              echo "❌ ERROR: Staging can only be updated from develop branch"
              echo "   Attempted: $HEAD_BRANCH → staging" 
              echo "   Required: develop → staging"
              exit 1
            fi
            
            echo "✅ Branch flow rules validated successfully"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            DISPATCH_BRANCH="${{ github.event.inputs.branch }}"
            if [[ "$DISPATCH_BRANCH" != "develop" ]]; then
              echo "❌ ERROR: Manual deployment only allowed for develop branch"
              exit 1
            fi
            echo "✅ Manual deployment authorized for develop branch"
          fi

      - name: Set deployment variables
        id: vars
        run: |
          # Determine target branch
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TARGET_BRANCH="${{ github.event.inputs.branch }}"
          fi
          
          echo "TARGET_BRANCH=$TARGET_BRANCH" >> $GITHUB_ENV
          
          if [[ "$TARGET_BRANCH" == "develop" ]]; then
            echo "HOST=${{ secrets.DEVELOP_HOST }}" >> $GITHUB_ENV
            echo "BRANCH=develop" >> $GITHUB_ENV
            echo "ENV_NAME=development" >> $GITHUB_ENV
            echo "ENV_URL=https://develop.api.cms.itqan.dev" >> $GITHUB_ENV
            echo "COMPOSE_FILE=deployment/docker/docker-compose.develop.yml" >> $GITHUB_ENV
          elif [[ "$TARGET_BRANCH" == "staging" ]]; then
            echo "HOST=${{ secrets.STAGING_HOST }}" >> $GITHUB_ENV
            echo "BRANCH=staging" >> $GITHUB_ENV
            echo "ENV_NAME=staging" >> $GITHUB_ENV
            echo "ENV_URL=https://staging.api.cms.itqan.dev" >> $GITHUB_ENV
            echo "COMPOSE_FILE=deployment/docker/docker-compose.staging.yml" >> $GITHUB_ENV
          elif [[ "$TARGET_BRANCH" == "main" ]]; then
            echo "HOST=${{ secrets.PROD_HOST }}" >> $GITHUB_ENV
            echo "BRANCH=main" >> $GITHUB_ENV
            echo "ENV_NAME=production" >> $GITHUB_ENV
            echo "ENV_URL=https://api.cms.itqan.dev" >> $GITHUB_ENV
            echo "COMPOSE_FILE=deployment/docker/docker-compose.production.yml" >> $GITHUB_ENV
          fi

      - name: Display deployment info
        run: |
          echo "🎯 Deployment Details:"
          echo "   Event: ${{ github.event_name }}"
          echo "   Environment: ${{ env.ENV_NAME }}"
          echo "   Branch: ${{ env.BRANCH }}"
          echo "   URL: ${{ env.ENV_URL }}"
          echo "   Compose File: ${{ env.COMPOSE_FILE }}"

      - name: Deploy to ${{ env.ENV_NAME }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "🚀 Starting deployment to ${{ env.ENV_NAME }} environment..."
            echo "📋 Target: ${{ env.ENV_URL }}"
            echo "🌿 Branch: ${{ env.BRANCH }}"
            
            # Navigate to application directory
            cd /srv/cms-backend
            
            # Pull latest changes
            echo "📥 Fetching latest code from GitHub..."
            git fetch origin ${{ env.BRANCH }}
            git reset --hard origin/${{ env.BRANCH }}
            
            # Display current commit
            echo "📋 Current commit: $(git rev-parse --short HEAD) - $(git log -1 --pretty=%B)"
            
            # Verify environment file exists
            if [ ! -f deployment/docker/.env ]; then
              echo "❌ Environment file missing!"
              exit 1
            fi
            
            # Deploy with Docker Compose (recreate only web container, preserve caddy)
            echo "🐳 Stopping web container only..."
            docker compose -f ${{ env.COMPOSE_FILE }} stop web || true
            docker compose -f ${{ env.COMPOSE_FILE }} rm -f web || true
            
            echo "🔧 Building and starting web container (preserving caddy)..."
            docker compose -f ${{ env.COMPOSE_FILE }} up -d --build web
            
            # Wait for services to be ready
            echo "⏳ Waiting for services to start..."
            sleep 30
            
            # Health check
            echo "🔍 Performing health check..."
            if curl -f -s ${{ env.ENV_URL }}/health > /dev/null; then
              echo "✅ Health check passed!"
            else
              echo "⚠️ Health check failed, but deployment completed"
            fi
            
            # Clean up old Docker images
            echo "🧹 Cleaning up old Docker images..."
            docker image prune -f || true
            
            echo "🎉 Deployment to ${{ env.ENV_NAME }} completed successfully!"
            echo "🌐 Application URL: ${{ env.ENV_URL }}"
