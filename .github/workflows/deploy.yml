name: Deploy to DigitalOcean

on:
  push:
    branches: [develop, staging, main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Set deployment variables
        id: vars
        run: |
          if [[ "${GITHUB_REF_NAME}" == "develop" ]]; then
            echo "HOST=${{ secrets.DEVELOP_HOST }}" >> $GITHUB_ENV
            echo "BRANCH=develop" >> $GITHUB_ENV
            echo "ENV_NAME=development" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "staging" ]]; then
            echo "HOST=${{ secrets.STAGING_HOST }}" >> $GITHUB_ENV
            echo "BRANCH=staging" >> $GITHUB_ENV
            echo "ENV_NAME=staging" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "HOST=${{ secrets.PROD_HOST }}" >> $GITHUB_ENV
            echo "BRANCH=main" >> $GITHUB_ENV
            echo "ENV_NAME=production" >> $GITHUB_ENV
          else
            echo "Unknown branch: ${GITHUB_REF_NAME}"
            exit 1
          fi

      - name: Deploy to ${{ env.ENV_NAME }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            
            echo "üöÄ Starting deployment to ${{ env.ENV_NAME }} environment..."
            
            # Navigate to application directory
            cd /srv/cms-backend
            
            # Clone repository if it doesn't exist
            if [ ! -d ".git" ]; then
              echo "üì¶ Cloning repository..."
              git clone --depth 1 --branch ${{ env.BRANCH }} https://github.com/Itqan-community/cms-backend.git /srv/cms-backend
            fi
            
            # Update to latest code
            echo "üîÑ Updating code..."
            git fetch origin ${{ env.BRANCH }}:${{ env.BRANCH }} --force
            git checkout ${{ env.BRANCH }}
            git reset --hard origin/${{ env.BRANCH }}
            
            # Verify environment file exists
            if [ ! -f "deployment/docker/.env" ]; then
              echo "‚ùå Environment file missing: deployment/docker/.env"
              echo "Please create this file on the server using deployment/docker/env.template"
              exit 1
            fi
            
            # Pull latest images and rebuild
            echo "üèóÔ∏è  Building and starting containers..."
            docker compose -f deployment/docker/docker-compose.yml pull || true
            docker compose -f deployment/docker/docker-compose.yml up -d --build
            
            # Clean up old images
            echo "üßπ Cleaning up old Docker images..."
            docker image prune -f || true
            
            # Wait for health check
            echo "üè• Waiting for application to be healthy..."
            sleep 30
            
            # Check if application is responding
            if docker compose -f deployment/docker/docker-compose.yml exec -T web curl -fsS http://localhost:8000/health >/dev/null 2>&1; then
              echo "‚úÖ Deployment successful! Application is healthy."
            else
              echo "‚ö†Ô∏è  Application may not be fully ready yet. Check logs:"
              docker compose -f deployment/docker/docker-compose.yml logs --tail=20 web
            fi
            
            echo "üéâ Deployment to ${{ env.ENV_NAME }} completed!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment to ${{ env.ENV_NAME }} was successful!"
          else
            echo "‚ùå Deployment to ${{ env.ENV_NAME }} failed!"
          fi
