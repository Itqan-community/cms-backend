{
  "prompt": "Document and integrate the User Access Request Scenario flow into CMS documentation and create corresponding UI components for the resource access request workflow",
  "context": {
    "project": "Itqan CMS",
    "feature": "User Access Request Workflow Documentation & Implementation",
    "auth_model": "Auth0 Hybrid (SPA + M2M)",
    "tech_stack": ["Angular 19", "Django 4.2", "PostgreSQL", "NG-ZORRO"],
    "screens": ["User Access Request Scenario"],
    "colors": {"primary": "#669B80", "dark": "#22433D"}
  },
  "objectives": [
    "Document the complete User Access Request Scenario flow in cms.mdc",
    "Create Angular components for the access request workflow UI",
    "Implement Django backend APIs for access request processing",
    "Design NG-ZORRO components for terms/conditions carousel and approval flow",
    "Ensure integration with existing Developer Flow Documentation",
    "Implement bilingual support (EN/AR) for all workflow screens"
  ],
  "tasks": [
    "Add User Access Request Scenario documentation section to cms.mdc",
    "Create Angular component for access request questionnaire form",
    "Implement NG-ZORRO carousel component for terms and conditions display",
    "Design accept/discard decision interface with proper UX flow",
    "Create Django API endpoints for access request submission and processing",
    "Implement file download functionality with progress indicators",
    "Add proper error handling and validation for all workflow steps",
    "Ensure workflow integrates with existing AccessRequest entity model",
    "Test complete flow from dashboard to resource download"
  ],
  "guard_rails": [
    "Maintain consistency with existing Developer Flow Documentation",
    "Follow NG-ZORRO design system patterns and components",
    "Ensure proper Islamic content licensing compliance",
    "Implement proper security validation for resource access",
    "Maintain C4 architecture alignment and 7-entity schema compliance",
    "Follow established Auth0 + Django JWT authentication patterns"
  ],
  "acceptance_criteria": [
    "cms.mdc contains comprehensive User Access Request Scenario documentation",
    "Angular components follow NG-ZORRO design system guidelines",
    "Terms and conditions carousel displays properly in both EN/AR",
    "Accept/discard workflow functions correctly with proper state management",
    "Django backend properly validates and processes access requests",
    "File download functionality works with progress indicators",
    "Complete flow integrates seamlessly with existing developer workflow",
    "All screens support bilingual functionality with RTL layout for Arabic"
  ],
  "definition_of_done": [
    "cms.mdc updated with User Access Request Scenario section",
    "Angular components implemented with NG-ZORRO best practices",
    "Django API endpoints created and tested",
    "Complete workflow tested end-to-end in Docker environment",
    "Documentation follows established markdown template",
    "Task 32 marked as completed in tasks.csv"
  ],
  "out_of_scope": [
    "Advanced analytics for access request patterns",
    "Automated approval workflows (manual admin approval required)",
    "Integration with external payment systems",
    "Advanced file encryption beyond basic Islamic content integrity",
    "Multi-step approval workflows (single admin approval sufficient)"
  ],
  "references": [
    "User Access Request Scenario flow diagram",
    "docs/screens/Developer Resource Access & Resource Download - Initial Registration Scenario.png",
    ".cursor/rules/cms.mdc - Developer Flow Documentation section",
    "backend/apps/licensing/ - AccessRequest entity and workflows",
    "backend/apps/content/ - Resource and Distribution entities",
    "frontend/src/app/features/dashboard/ - Existing dashboard components",
    "docs/diagrams/level4-data-models.md - 7-entity database schema",
    "ai-memory-bank/tasks/31.json - Related developer flow documentation task"
  ]
}
