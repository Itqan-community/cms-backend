{
    "prompt": "You are an autonomous coding agent completing STORY-7: MinIO Upload Provider for Itqan CMS. Configure Django 4.2 to store file uploads in local MinIO bucket instead of local filesystem, ensuring S3-compatible setup works in development.",
    "context": {
        "project": "Itqan CMS",
        "feature": "File Storage Integration",
        "tech_stack": [
            "Django 4.2",
            "Angular 19",
            "NG-ZORRO",
            "MinIO",
            "Docker"
        ],
        "environment": "Development",
        "complete_screen_flow": "docs/screens/cms-screens.png"
    },
    "objectives": [
        "Install and configure Django storage backend for S3-compatible MinIO",
        "Connect Django to MinIO container running on port 9000",
        "Create initial bucket and set appropriate permissions",
        "Ensure uploads attach to Resource entities in database",
        "Create Angular media library UI following ADMIN-001 screen design",
        "Test file upload via Django REST API and Angular frontend"
    ],
    "tasks": [
        "Install django-storages and boto3 packages for S3-compatible storage",
        "Configure Django settings with MinIO endpoint and credentials",
        "Create Django medialib app with MediaFile and MediaFolder models",
        "Add MinIO bucket creation script or manual setup instructions",
        "Implement Django REST API endpoints for media upload and management",
        "Create Angular media library components using NG-ZORRO file upload",
        "Update env.dev.example with proper MinIO settings",
        "Test media library upload and verify files stored in MinIO",
        "Document MinIO console access and bucket management"
    ],
    "guard_rails": [
        "Use S3_FORCE_PATH_STYLE=true for MinIO compatibility",
        "Store MinIO credentials in environment variables only",
        "Ensure bucket has appropriate access policy for development",
        "Do not commit real access keys to version control"
    ],
    "acceptance_criteria": [
        "Given I upload an image via Angular media library UI (ADMIN-001), then it appears in MinIO bucket",
        "Given I access uploaded file URL, then image displays correctly in Angular frontend",
        "MinIO console shows uploaded files in itqan-uploads bucket",
        "Django REST API properly handles file upload and metadata storage",
        "Angular components follow NG-ZORRO design system and cms.mdc flow",
        "No files are stored in local filesystem, all in MinIO"
    ],
    "definition_of_done": [
        "Django storage configuration documented in README",
        "Angular media library components implemented with NG-ZORRO",
        "Test upload works end-to-end via docker-compose stack",
        "MinIO bucket accessible via console at localhost:9001",
        "Complete integration with cms.mdc screen flow"
    ],
    "out_of_scope": [
        "Production S3 or Alibaba OSS configuration",
        "Image transformation or optimization",
        "CDN integration"
    ],
    "references": [
        "deployment/docker/docker-compose.yml MinIO service",
        "backend/config/settings/base.py Django storage configuration",
        "docs/screens/cms-screens.png - Complete screen flow with ADMIN-001",
        "django-storages documentation for S3-compatible backends",
        "Screen ADMIN-001: Media Library interface with NG-ZORRO file upload",
        ".cursor/rules/cms.mdc - Complete Screen Flow Documentation section",
        "backend/apps/medialib/ - Django media management app",
        "frontend/src/app/features/admin/media-library/ - Angular media components"
    ]
}