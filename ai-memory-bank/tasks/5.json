{
  "prompt": "Integrate Celery task queue with MeiliSearch for content indexing, using Redis broker and Django signals for automatic updates",
  "context": {
    "project": "Itqan CMS",
    "feature": "Celery + MeiliSearch Integration", 
    "auth_model": "Service-to-service integration",
    "tech_stack": ["Celery", "Redis", "MeiliSearch", "Django Signals", "Background Tasks"],
    "screens": [],
    "colors": {"primary": "#669B80", "dark": "#22433D"}
  },
  "objectives": [
    "Setup Celery with Redis broker for background tasks",
    "Configure MeiliSearch for full-text search indexing",
    "Create Django signals to trigger indexing on model changes",
    "Implement search index management tasks",
    "Build monitoring and error handling for async tasks"
  ],
  "tasks": [
    "Install and configure Celery with Redis broker",
    "Setup MeiliSearch server and Python client",
    "Create Celery tasks for indexing Resources and content",
    "Implement Django signals on Resource/License/Distribution models",
    "Build search index configuration and mapping",
    "Create tasks for bulk indexing and index rebuilding",
    "Add Celery monitoring with Django admin integration",
    "Implement error handling and retry logic for failed tasks"
  ],
  "guard_rails": [
    "All indexing operations must be idempotent",
    "Handle MeiliSearch connection failures gracefully",
    "Implement proper task retry mechanisms",
    "Log all indexing operations for debugging",
    "Ensure search index stays synchronized with database"
  ],
  "acceptance_criteria": [
    "Celery workers process tasks successfully",
    "MeiliSearch indexes update automatically on model changes",
    "Search functionality returns relevant results",
    "Failed tasks retry appropriately",
    "Monitoring dashboard shows task status"
  ],
  "definition_of_done": [
    "Celery and Redis running in development environment",
    "MeiliSearch indexes created and populated",
    "Django signals trigger indexing correctly",
    "Search API endpoints return accurate results",
    "Error handling tested with connection failures"
  ],
  "out_of_scope": [
    "Advanced search features like faceting",
    "Search analytics and metrics",
    "Custom search ranking algorithms",
    "Search API rate limiting"
  ],
  "references": [
    "Celery documentation",
    "MeiliSearch Python SDK docs",
    "Django signals documentation",
    "Redis configuration best practices"
  ]
}
