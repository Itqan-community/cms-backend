import { Component, signal, computed, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { NzCardModule } from 'ng-zorro-antd/card';
import { NzFormModule } from 'ng-zorro-antd/form';
import { NzInputModule } from 'ng-zorro-antd/input';
import { NzButtonModule } from 'ng-zorro-antd/button';
import { NzSelectModule } from 'ng-zorro-antd/select';
import { NzSwitchModule } from 'ng-zorro-antd/switch';
import { NzDividerModule } from 'ng-zorro-antd/divider';
import { NzSpaceModule } from 'ng-zorro-antd/space';
import { NzAvatarModule } from 'ng-zorro-antd/avatar';
import { NzUploadModule } from 'ng-zorro-antd/upload';
import { NzIconModule } from 'ng-zorro-antd/icon';
import { NzMessageService } from 'ng-zorro-antd/message';
import { NzTabsModule } from 'ng-zorro-antd/tabs';
import { NzDescriptionsModule } from 'ng-zorro-antd/descriptions';
import { NzTagModule } from 'ng-zorro-antd/tag';

import { I18nService } from '../../core/services/i18n.service';
import { AuthService } from '../../core/services/auth.service';
import { StateService } from '../../core/services/state.service';

/**
 * User Profile Component with bilingual support (EN/AR)
 * Handles user profile display and editing with proper RTL layout
 */
@Component({
  selector: 'app-profile',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    NzCardModule,
    NzFormModule,
    NzInputModule,
    NzButtonModule,
    NzSelectModule,
    NzSwitchModule,
    NzDividerModule,
    NzSpaceModule,
    NzAvatarModule,
    NzUploadModule,
    NzIconModule,
    NzTabsModule,
    NzDescriptionsModule,
    NzTagModule
  ],
  template: `
    <div class="profile-container" [dir]="isRTL() ? 'rtl' : 'ltr'">
      <div class="profile-header">
        <nz-card [nzBordered]="false" class="profile-header-card">
          <div class="profile-header-content">
            <!-- Profile Avatar -->
            <div class="profile-avatar-section">
              <nz-avatar 
                [nzSize]="96" 
                [nzText]="getUserInitials()"
                [nzSrc]="currentUser()?.avatar_url || ''"
                class="profile-avatar">
              </nz-avatar>
              <nz-upload 
                class="avatar-upload"
                nzAction="https://www.mocky.io/v2/5cc8019d300000980a055e76"
                nzListType="picture-card"
                [nzShowUploadList]="false">
                <div class="upload-btn">
                  <span nz-icon nzType="camera" nzTheme="outline"></span>
                </div>
              </nz-upload>
            </div>

            <!-- Profile Summary -->
            <div class="profile-summary">
              <h1 class="profile-name">{{ getUserDisplayName() }}</h1>
              <p class="profile-email">{{ currentUser()?.email || '' }}</p>
              <div class="profile-meta">
                <nz-tag [nzColor]="'green'">{{ t()('profile.account_type') }}: {{ getUserRole() }}</nz-tag>
                <span class="profile-member-since">
                  {{ t()('profile.member_since') }}: {{ formatDate(currentUser()?.created_at) }}
                </span>
              </div>
            </div>
          </div>
        </nz-card>
      </div>

      <!-- Profile Content Tabs -->
      <div class="profile-content">
        <nz-tabset [nzType]="'card'" [nzTabPosition]="isRTL() ? 'right' : 'left'">
          
          <!-- Personal Information Tab -->
          <nz-tab [nzTitle]="t()('profile.personal_info')">
            <nz-card [nzTitle]="t()('profile.edit_profile')" [nzExtra]="extraTemplate">
              <form nz-form [formGroup]="profileForm" (ngSubmit)="onSaveProfile()">
                <div class="form-grid">
                  
                  <!-- First Name -->
                  <nz-form-item class="form-item">
                    <nz-form-label [nzRequired]="true">{{ t()('profile.first_name') }}</nz-form-label>
                    <nz-form-control nzErrorTip="First name is required">
                      <input 
                        nz-input 
                        formControlName="firstName"
                        [placeholder]="t()('profile.first_name')"
                        class="form-input">
                    </nz-form-control>
                  </nz-form-item>

                  <!-- Last Name -->
                  <nz-form-item class="form-item">
                    <nz-form-label [nzRequired]="true">{{ t()('profile.last_name') }}</nz-form-label>
                    <nz-form-control nzErrorTip="Last name is required">
                      <input 
                        nz-input 
                        formControlName="lastName"
                        [placeholder]="t()('profile.last_name')"
                        class="form-input">
                    </nz-form-control>
                  </nz-form-item>

                  <!-- Email (readonly) -->
                  <nz-form-item class="form-item full-width">
                    <nz-form-label>{{ t()('profile.email') }}</nz-form-label>
                    <nz-form-control>
                      <input 
                        nz-input 
                        formControlName="email"
                        [placeholder]="t()('profile.email')"
                        [readonly]="true"
                        class="form-input readonly">
                    </nz-form-control>
                  </nz-form-item>

                  <!-- Phone -->
                  <nz-form-item class="form-item">
                    <nz-form-label>{{ t()('profile.phone') }}</nz-form-label>
                    <nz-form-control>
                      <input 
                        nz-input 
                        formControlName="phone"
                        [placeholder]="t()('profile.phone')"
                        class="form-input">
                    </nz-form-control>
                  </nz-form-item>

                  <!-- Organization -->
                  <nz-form-item class="form-item">
                    <nz-form-label>{{ t()('profile.organization') }}</nz-form-label>
                    <nz-form-control>
                      <input 
                        nz-input 
                        formControlName="organization"
                        [placeholder]="t()('profile.organization')"
                        class="form-input">
                    </nz-form-control>
                  </nz-form-item>

                  <!-- Job Title -->
                  <nz-form-item class="form-item">
                    <nz-form-label>{{ t()('profile.job_title') }}</nz-form-label>
                    <nz-form-control>
                      <input 
                        nz-input 
                        formControlName="jobTitle"
                        [placeholder]="t()('profile.job_title')"
                        class="form-input">
                    </nz-form-control>
                  </nz-form-item>

                  <!-- Location -->
                  <nz-form-item class="form-item">
                    <nz-form-label>{{ t()('profile.location') }}</nz-form-label>
                    <nz-form-control>
                      <input 
                        nz-input 
                        formControlName="location"
                        [placeholder]="t()('profile.location')"
                        class="form-input">
                    </nz-form-control>
                  </nz-form-item>

                  <!-- Website -->
                  <nz-form-item class="form-item">
                    <nz-form-label>{{ t()('profile.website') }}</nz-form-label>
                    <nz-form-control>
                      <input 
                        nz-input 
                        formControlName="website"
                        [placeholder]="t()('profile.website')"
                        type="url"
                        class="form-input">
                    </nz-form-control>
                  </nz-form-item>

                  <!-- Biography -->
                  <nz-form-item class="form-item full-width">
                    <nz-form-label>{{ t()('profile.bio') }}</nz-form-label>
                    <nz-form-control>
                      <textarea 
                        nz-input 
                        formControlName="bio"
                        [placeholder]="t()('profile.bio')"
                        [rows]="4"
                        class="form-input">
                      </textarea>
                    </nz-form-control>
                  </nz-form-item>

                </div>
              </form>

              <ng-template #extraTemplate>
                <nz-space>
                  <button 
                    *nzSpaceItem
                    nz-button 
                    nzType="default" 
                    (click)="onCancelEdit()"
                    [loading]="isLoading()">
                    <span nz-icon nzType="close" nzTheme="outline"></span>
                    {{ t()('profile.cancel_changes') }}
                  </button>
                  <button 
                    *nzSpaceItem
                    nz-button 
                    nzType="primary" 
                    (click)="onSaveProfile()"
                    [loading]="isLoading()">
                    <span nz-icon nzType="save" nzTheme="outline"></span>
                    {{ t()('profile.save_changes') }}
                  </button>
                </nz-space>
              </ng-template>
            </nz-card>
          </nz-tab>

          <!-- Preferences Tab -->
          <nz-tab [nzTitle]="t()('profile.preferences')">
            <nz-card [nzTitle]="t()('profile.preferences')">
              <div class="preferences-content">
                
                <!-- Language Preference -->
                <nz-form-item class="preference-item">
                  <nz-form-label>{{ t()('profile.language_preference') }}</nz-form-label>
                  <nz-form-control>
                    <nz-select 
                      [ngModel]="currentLanguage()" 
                      (ngModelChange)="onLanguageChange($event)"
                      class="preference-select">
                      <nz-option nzValue="en" nzLabel="English"></nz-option>
                      <nz-option nzValue="ar" nzLabel="العربية"></nz-option>
                    </nz-select>
                  </nz-form-control>
                </nz-form-item>

                <!-- Notification Settings -->
                <nz-divider [nzText]="t()('profile.notifications')"></nz-divider>
                
                <div class="notification-settings">
                  <nz-form-item class="notification-item">
                    <nz-form-label>{{ t()('profile.email_notifications') }}</nz-form-label>
                    <nz-form-control>
                      <nz-switch 
                        [ngModel]="emailNotifications()" 
                        (ngModelChange)="emailNotifications.set($event)">
                      </nz-switch>
                    </nz-form-control>
                  </nz-form-item>

                  <nz-form-item class="notification-item">
                    <nz-form-label>{{ t()('profile.push_notifications') }}</nz-form-label>
                    <nz-form-control>
                      <nz-switch 
                        [ngModel]="pushNotifications()" 
                        (ngModelChange)="pushNotifications.set($event)">
                      </nz-switch>
                    </nz-form-control>
                  </nz-form-item>

                  <nz-form-item class="notification-item">
                    <nz-form-label>{{ t()('profile.marketing_emails') }}</nz-form-label>
                    <nz-form-control>
                      <nz-switch 
                        [ngModel]="marketingEmails()" 
                        (ngModelChange)="marketingEmails.set($event)">
                      </nz-switch>
                    </nz-form-control>
                  </nz-form-item>

                  <nz-form-item class="notification-item">
                    <nz-form-label>{{ t()('profile.security_alerts') }}</nz-form-label>
                    <nz-form-control>
                      <nz-switch 
                        [ngModel]="securityAlerts()" 
                        (ngModelChange)="securityAlerts.set($event)">
                      </nz-switch>
                    </nz-form-control>
                  </nz-form-item>
                </div>

              </div>
            </nz-card>
          </nz-tab>

          <!-- Security Tab -->
          <nz-tab [nzTitle]="t()('profile.security')">
            <nz-card [nzTitle]="t()('profile.security')">
              <div class="security-content">
                
                <nz-descriptions [nzBordered]="true" [nzColumn]="1">
                  <nz-descriptions-item [nzTitle]="t()('profile.last_login')">
                    {{ formatDateTime(currentUser()?.last_login || new Date()) }}
                  </nz-descriptions-item>
                  <nz-descriptions-item [nzTitle]="t()('profile.member_since')">
                    {{ formatDate(currentUser()?.created_at || new Date()) }}
                  </nz-descriptions-item>
                  <nz-descriptions-item [nzTitle]="t()('profile.account_type')">
                    <nz-tag [nzColor]="'blue'">{{ getUserRole() }}</nz-tag>
                  </nz-descriptions-item>
                </nz-descriptions>

                <nz-divider></nz-divider>

                <div class="security-actions">
                  <button nz-button nzType="default" [nzSize]="'large'" class="security-btn">
                    <span nz-icon nzType="key" nzTheme="outline"></span>
                    {{ t()('profile.change_password') }}
                  </button>

                  <button nz-button nzType="default" [nzSize]="'large'" class="security-btn">
                    <span nz-icon nzType="safety-certificate" nzTheme="outline"></span>
                    {{ t()('profile.two_factor_auth') }}
                  </button>

                  <button nz-button nzType="default" [nzSize]="'large'" class="security-btn">
                    <span nz-icon nzType="laptop" nzTheme="outline"></span>
                    {{ t()('profile.active_sessions') }}
                  </button>

                  <button nz-button nzType="default" [nzSize]="'large'" class="security-btn">
                    <span nz-icon nzType="api" nzTheme="outline"></span>
                    {{ t()('profile.api_keys') }}
                  </button>
                </div>

              </div>
            </nz-card>
          </nz-tab>

        </nz-tabset>
      </div>
    </div>
  `,
  styles: [`
    .profile-container {
      min-height: 100vh;
      background: #f5f5f5;
      padding: 24px;
    }

    .profile-header {
      margin-bottom: 24px;
    }

    .profile-header-card {
      background: linear-gradient(135deg, #669B80 0%, #5a8670 100%);
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(102, 155, 128, 0.3);
    }

    :global(.profile-header-card .ant-card-body) {
      padding: 32px;
    }

    .profile-header-content {
      display: flex;
      align-items: center;
      gap: 24px;
      color: white;
    }

    .profile-avatar-section {
      position: relative;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 12px;
    }

    .profile-avatar {
      background: rgba(255, 255, 255, 0.2);
      color: white;
      font-size: 36px;
      font-weight: 600;
      border: 4px solid rgba(255, 255, 255, 0.3);
    }

    .avatar-upload {
      position: absolute;
      bottom: -6px;
      right: -6px;
    }

    :global(.avatar-upload .ant-upload.ant-upload-select) {
      width: 32px !important;
      height: 32px !important;
      border-radius: 50% !important;
      background: rgba(255, 255, 255, 0.9) !important;
      border: 2px solid white !important;
    }

    .upload-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      height: 100%;
      color: #669B80;
      font-size: 14px;
    }

    .profile-summary {
      flex: 1;
    }

    .profile-name {
      font-size: 28px;
      font-weight: 600;
      margin: 0 0 8px 0;
      color: white;
    }

    .profile-email {
      font-size: 16px;
      opacity: 0.9;
      margin: 0 0 16px 0;
    }

    .profile-meta {
      display: flex;
      align-items: center;
      gap: 16px;
      flex-wrap: wrap;
    }

    :global(.profile-meta .ant-tag) {
      border-radius: 16px;
      padding: 4px 12px;
      font-weight: 500;
    }

    .profile-member-since {
      font-size: 14px;
      opacity: 0.8;
    }

    .profile-content {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      padding: 0;
    }

    :global(.profile-content .ant-tabs-card .ant-tabs-content) {
      padding: 24px;
    }

    .form-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 24px 16px;
      margin-bottom: 24px;
    }

    .form-item.full-width {
      grid-column: 1 / -1;
    }

    .form-input {
      border-radius: 8px;
      padding: 12px 16px;
      font-size: 14px;
    }

    .form-input.readonly {
      background: #f5f5f5;
      color: #666;
    }

    :global(.form-item .ant-form-item-label) {
      padding-bottom: 8px;
    }

    :global(.form-item .ant-form-item-label > label) {
      font-weight: 500;
      color: #262626;
    }

    .preferences-content {
      max-width: 600px;
    }

    .preference-item,
    .notification-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 16px 0;
      border-bottom: 1px solid #f0f0f0;
    }

    .preference-item:last-child,
    .notification-item:last-child {
      border-bottom: none;
    }

    .preference-select {
      min-width: 150px;
    }

    .notification-settings {
      margin-top: 16px;
    }

    .security-content {
      max-width: 800px;
    }

    .security-actions {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 16px;
      margin-top: 24px;
    }

    .security-btn {
      height: 56px;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      font-weight: 500;
    }

    .security-btn:hover {
      border-color: #669B80;
      color: #669B80;
    }

    /* RTL Support */
    :host-context([dir="rtl"]) .profile-header-content {
      flex-direction: row-reverse;
    }

    :host-context([dir="rtl"]) .profile-meta {
      flex-direction: row-reverse;
    }

    :host-context([dir="rtl"]) .avatar-upload {
      right: auto;
      left: -6px;
    }

    :host-context([dir="rtl"]) .form-grid {
      direction: rtl;
    }

    :host-context([dir="rtl"]) .security-actions {
      direction: rtl;
    }

    /* Mobile Responsive */
    @media (max-width: 768px) {
      .profile-container {
        padding: 16px;
      }

      .profile-header-content {
        flex-direction: column;
        text-align: center;
      }

      .form-grid {
        grid-template-columns: 1fr;
        gap: 16px;
      }

      .security-actions {
        grid-template-columns: 1fr;
      }
    }

    /* Arabic Typography */
    :global(.lang-ar) .form-input,
    :global(.lang-ar) .profile-name,
    :global(.lang-ar) .security-btn {
      font-family: 'Noto Sans Arabic', 'IBM Plex Sans Arabic', sans-serif;
      font-weight: 500;
    }
  `]
})
export class ProfileComponent {
  private readonly fb = inject(FormBuilder);
  private readonly router = inject(Router);
  private readonly message = inject(NzMessageService);
  private readonly i18nService = inject(I18nService);
  private readonly authService = inject(AuthService);
  private readonly stateService = inject(StateService);

  // Reactive signals
  readonly currentUser = this.stateService.currentUser;
  readonly currentLanguage = this.stateService.currentLanguage;
  readonly isRTL = this.stateService.isRTL;
  readonly isLoading = signal(false);

  // Notification preferences
  readonly emailNotifications = signal(true);
  readonly pushNotifications = signal(true);
  readonly marketingEmails = signal(false);
  readonly securityAlerts = signal(true);

  // Translation helper
  readonly t = this.i18nService.t;

  // Profile form
  readonly profileForm: FormGroup;

  constructor() {
    // Initialize form
    this.profileForm = this.fb.group({
      firstName: ['', [Validators.required]],
      lastName: ['', [Validators.required]],
      email: [{ value: '', disabled: true }],
      phone: [''],
      organization: [''],
      jobTitle: [''],
      location: [''],
      website: [''],
      bio: ['']
    });

    // Load user data
    this.loadUserData();
  }

  /**
   * Load user data into form
   */
  private loadUserData(): void {
    const user = this.currentUser();
    if (user) {
      const profileData = user.profile_data || {};
      this.profileForm.patchValue({
        firstName: user.first_name || '',
        lastName: user.last_name || '',
        email: user.email || '',
        phone: profileData['phone'] || '',
        organization: profileData['organization'] || '',
        jobTitle: profileData['job_title'] || '',
        location: profileData['location'] || '',
        website: profileData['website'] || '',
        bio: profileData['bio'] || ''
      });
    }
  }

  /**
   * Get user display name
   */
  getUserDisplayName(): string {
    return this.stateService.userDisplayName();
  }

  /**
   * Get user initials for avatar
   */
  getUserInitials(): string {
    const user = this.currentUser();
    if (!user) return 'U';
    
    const firstName = user.first_name || '';
    const lastName = user.last_name || '';
    
    if (firstName && lastName) {
      return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();
    } else if (firstName) {
      return firstName.charAt(0).toUpperCase();
    } else if (user.email) {
      return user.email.charAt(0).toUpperCase();
    }
    
    return 'U';
  }

  /**
   * Get user role display
   */
  getUserRole(): string {
    const user = this.currentUser();
    return user?.role?.name || 'User';
  }

  /**
   * Format date for display
   */
  formatDate(dateString: string | Date | undefined): string {
    if (!dateString) return '';
    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;
    return this.i18nService.formatIslamicDate(date);
  }

  /**
   * Format date and time for display
   */
  formatDateTime(dateString: string | Date | undefined): string {
    if (!dateString) return '';
    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;
    return `${this.formatDate(date)} ${this.i18nService.formatIslamicTime(date)}`;
  }

  /**
   * Handle language change
   */
  onLanguageChange(language: 'en' | 'ar'): void {
    this.i18nService.setLanguage(language);
  }

  /**
   * Save profile changes
   */
  async onSaveProfile(): Promise<void> {
    if (this.profileForm.valid) {
      this.isLoading.set(true);
      
      try {
        const formData = this.profileForm.value;
        
        // Here you would typically call an API to update the user profile
        // For now, we'll simulate the API call
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Update local user state with form data
        const currentUserData = this.currentUser();
        if (currentUserData) {
          const updatedProfileData = {
            ...currentUserData.profile_data,
            ['phone']: formData.phone,
            ['organization']: formData.organization,
            ['job_title']: formData.jobTitle,
            ['location']: formData.location,
            ['website']: formData.website,
            ['bio']: formData.bio
          };
          
          const updatedUser = {
            ...currentUserData,
            first_name: formData.firstName,
            last_name: formData.lastName,
            profile_data: updatedProfileData
          };
          
          this.stateService.setCurrentUser(updatedUser);
        }
        
        this.message.success(this.t()('profile.profile_updated'));
      } catch (error) {
        console.error('Profile update error:', error);
        this.message.error(this.t()('profile.update_error'));
      } finally {
        this.isLoading.set(false);
      }
    } else {
      // Mark all fields as dirty to show validation errors
      Object.values(this.profileForm.controls).forEach(control => {
        control.markAsDirty();
        control.updateValueAndValidity();
      });
    }
  }

  /**
   * Cancel profile editing
   */
  onCancelEdit(): void {
    this.loadUserData();
    this.message.info(this.t()('profile.cancel_changes'));
  }
}
